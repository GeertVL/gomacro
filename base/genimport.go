/*
 * gomacro - A Go intepreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * import_wrappers.go
 *
 *  Created on May 26, 2017
 *      Author Massimiliano Ghilardi
 */

package base

import (
	"bytes"
	"fmt"
	"go/constant"
	"go/token"
	"go/types"
	"math"
	"strconv"
	"strings"
)

type genimport struct {
	globals     *Globals
	mode        ImportMode
	gpkg        *types.Package
	scope       *types.Scope
	names       []string
	out         *bytes.Buffer
	path        string
	name, name_ string
	suffix      string
	reflect     string
}

func (g *Globals) writeImportFile(out *bytes.Buffer, path string, gpkg *types.Package, mode ImportMode) (isEmpty bool) {

	gi := g.newGenImport(out, path, gpkg, mode)
	if gi == nil {
		return true
	}
	gi.write()
	return false
}

func (g *Globals) newGenImport(out *bytes.Buffer, path string, gpkg *types.Package, mode ImportMode) *genimport {
	scope := gpkg.Scope()
	names := scope.Names()

	isEmpty := true
	for _, name := range names {
		if obj := scope.Lookup(name); obj.Exported() {
			switch obj.(type) {
			case *types.Const, *types.Var, *types.Func, *types.TypeName:
				isEmpty = false
				break
			}
		}
	}
	if isEmpty {
		return nil
	}

	gi := &genimport{globals: g, mode: mode, gpkg: gpkg, scope: scope, names: names, out: out, path: path}

	name := path[1+strings.LastIndexByte(path, '/'):]
	name = sanitizeIdentifier(name)
	gi.name = name

	if mode == ImInception {
		gi.reflect = "r."
	} else {
		gi.name_ = name + "."
	}
	if mode != ImSharedLib {
		gi.suffix = fmt.Sprintf("_%s", sanitizeIdentifier(path))
	}
	return gi
}

func (gi *genimport) write() {

	mode := gi.mode
	out := gi.out
	path := gi.path

	var alias, filepkg string
	switch mode {
	case ImBuiltin:
		alias = "_b "
		filepkg = "imports"
	case ImInception:
		alias = "_i "
		filepkg = gi.name
	default:
		filepkg = "main"
	}

	fmt.Fprintf(gi.out, `// this file was generated by gomacro command: import %s%q
// DO NOT EDIT! Any change will be lost when the file is re-generated

package %s

import (`, alias, path, filepkg)

	var imports, reflect string
	if mode == ImInception {
		fmt.Fprintf(gi.out, "\n\tr \"reflect\"\n\t\"github.com/cosmos72/gomacro/imports\"")
		imports = "imports."
		reflect = gi.reflect
	} else {
		fmt.Fprintf(out, "\n\t. \"reflect\"")
	}
	for _, str := range gi.globals.CollectPackageImports(gi.gpkg, true) {
		if mode != ImInception || str != path {
			fmt.Fprintf(out, "\n\t%q", str)
		}
	}
	fmt.Fprintf(out, "\n)\n")

	if mode == ImSharedLib {
		fmt.Fprint(out, `
func main() {
}

func Exports() (map[string]Value, map[string]Type, map[string]Type, map[string]string, map[string][]string) {
	return map[string]Value{`)
	} else {
		fmt.Fprintf(out, `
// reflection: allow interpreted code to import %q
func init() {
	%sPackages[%q] = %sPackage{
	Binds: map[string]%sValue{`, path, imports, path, imports, reflect)
	}

	gi.writeBinds()

	if mode == ImSharedLib {
		fmt.Fprint(out, "\n\t}, map[string]Type{")
	} else {
		fmt.Fprintf(out, "\n\t},\n\tTypes: map[string]%sType{", reflect)
	}

	gi.writeTypes()

	if mode == ImSharedLib {
		fmt.Fprint(out, "\n\t}, map[string]Type{")
	} else {
		fmt.Fprintf(out, "\n\t},\n\tProxies: map[string]%sType{", reflect)
	}

	gi.writeProxies()

	if mode == ImSharedLib {
		fmt.Fprint(out, "\n\t}, map[string]string{")
	} else {
		fmt.Fprintf(out, "\n\t},\n\tUntypeds: map[string]string{")
	}

	gi.writeUntypeds()

	if mode == ImSharedLib {
		fmt.Fprint(out, "\n\t}, map[string][]string{")
	} else {
		fmt.Fprintf(out, "\n\t},\n\tWrappers: map[string][]string{")
	}

	gi.writeWrappers()

	if mode == ImSharedLib {
		fmt.Fprint(out, "\n\t}\n}\n")
	} else {
		fmt.Fprint(out, "\n\t} }\n}\n")
	}

	gi.writeInterfaceProxies()
}

func (gi *genimport) writeBinds() {
	for _, name := range gi.names {
		if obj := gi.scope.Lookup(name); obj.Exported() {
			switch obj := obj.(type) {
			case *types.Const:
				val := obj.Val()
				var conv1, conv2 string
				if t, ok := obj.Type().(*types.Basic); ok && t.Info()&types.IsUntyped != 0 {
					// untyped constants have arbitrary precision... they may overflow integers
					// this is just an approximation, use Package.Untypeds for exact value
					if val.Kind() == constant.Int {
						str := val.ExactString()
						conv1, conv2 = gi.globals.detectIntKind(gi.path, name, str)
					}
				}
				fmt.Fprintf(gi.out, "\n\t\t%q:\t%sValueOf(%s%s%s%s),", name, gi.reflect, conv1, gi.name_, name, conv2)
			case *types.Var:
				fmt.Fprintf(gi.out, "\n\t\t%q:\t%sValueOf(&%s%s).Elem(),", name, gi.reflect, gi.name_, name)
			case *types.Func:
				fmt.Fprintf(gi.out, "\n\t\t%q:\t%sValueOf(%s%s),", name, gi.reflect, gi.name_, name)
			}
		}
	}
}

func (gi *genimport) writeTypes() {
	for _, name := range gi.names {
		if obj := gi.scope.Lookup(name); obj.Exported() {
			switch obj.(type) {
			case *types.TypeName:
				fmt.Fprintf(gi.out, "\n\t\t%q:\t%sTypeOf((*%s%s)(nil)).Elem(),", name, gi.reflect, gi.name_, name)
			}
		}
	}
}

func (gi *genimport) writeProxies() {
	for _, name := range gi.names {
		if obj := gi.scope.Lookup(name); obj.Exported() {
			if t := extractInterface(obj, true); t != nil {
				fmt.Fprintf(gi.out, "\n\t\t%q:\t%sTypeOf((*%s%s)(nil)).Elem(),", name, gi.reflect, name, gi.suffix)
			}
		}
	}
}

func (gi *genimport) writeUntypeds() {
	for _, name := range gi.names {
		if obj := gi.scope.Lookup(name); obj.Exported() {
			switch obj := obj.(type) {
			case *types.Const:
				if t, ok := obj.Type().(*types.Basic); ok && t.Info()&types.IsUntyped != 0 {
					str := MarshalUntyped(t.Kind(), obj.Val())
					if len(str) != 0 {
						fmt.Fprintf(gi.out, "\n\t\t%q:\t%q,", name, str)
					}
				}
			}
		}
	}
}

func MarshalUntyped(kind types.BasicKind, val constant.Value) string {
	// untyped constants have arbitrary precision... they may overflow integers
	switch kind {
	case types.UntypedBool:
		if constant.BoolVal(val) {
			return "bool:true"
		} else {
			return "bool:false"
		}
	case types.UntypedInt:
		return fmt.Sprintf("int:%s", val.ExactString())
	case types.UntypedRune:
		return fmt.Sprintf("rune:%s", val.ExactString())
	case types.UntypedFloat:
		return fmt.Sprintf("float:%s", val.ExactString())
	case types.UntypedComplex:
		return fmt.Sprintf("complex:%s:%s", constant.Real(val).ExactString(), constant.Imag(val).ExactString())
	case types.UntypedString:
		return fmt.Sprintf("string:%s", constant.StringVal(val))
	case types.UntypedNil:
		return "nil"
	default:
		return ""
	}
}

func UnmarshalUntyped(marshalled string) (types.BasicKind, constant.Value) {
	var skind, str string
	if sep := strings.IndexByte(marshalled, ':'); sep >= 0 {
		skind = marshalled[:sep]
		str = marshalled[sep+1:]
	} else {
		skind = marshalled
	}

	var kind types.BasicKind
	var val constant.Value
	switch skind {
	case "bool":
		kind = types.UntypedBool
		if str == "true" {
			val = constant.MakeBool(true)
		} else {
			val = constant.MakeBool(false)
		}
	case "int":
		kind = types.UntypedInt
		val = constant.MakeFromLiteral(str, token.INT, 0)
	case "rune":
		kind = types.UntypedRune
		val = constant.MakeFromLiteral(str, token.INT, 0)
	case "float":
		kind = types.UntypedFloat
		val = unmarshalUntypedFloat(str)
	case "complex":
		kind = types.UntypedComplex
		if sep := strings.IndexByte(str, ':'); sep >= 0 {
			re := unmarshalUntypedFloat(str[:sep])
			im := unmarshalUntypedFloat(str[sep+1:])
			val = constant.BinaryOp(constant.ToComplex(re), token.ADD, constant.MakeImag(im))
		} else {
			val = constant.ToComplex(unmarshalUntypedFloat(str))
		}
	case "string":
		kind = types.UntypedString
		val = constant.MakeString(str)
	case "nil":
		kind = types.UntypedNil
	default:
		kind = types.Invalid
	}
	return kind, val
}

// generalization of constant.MakeFromLiteral, accepts the fractions generated by
// constant.Value.ExactString() for floating-point values
func unmarshalUntypedFloat(str string) constant.Value {
	if sep := strings.IndexByte(str, '/'); sep >= 0 {
		x := constant.MakeFromLiteral(str[:sep], token.FLOAT, 0)
		y := constant.MakeFromLiteral(str[sep+1:], token.FLOAT, 0)
		return constant.BinaryOp(x, token.QUO, y)
	}
	return constant.MakeFromLiteral(str, token.FLOAT, 0)
}

func (gi *genimport) writeWrappers() {
	for _, name := range gi.names {
		if obj := gi.scope.Lookup(name); obj.Exported() {
			switch obj.(type) {
			case *types.TypeName:
				if t, ok := obj.Type().(*types.Named); ok {
					// only structs can have embedded fields, and thus wrapper methods for embedded fields
					if _, ok := t.Underlying().(*types.Struct); ok {
						wrappers := new(analyzer).Analyze(t)
						if len(wrappers) != 0 {
							fmt.Fprintf(gi.out, "\n\t\t%q:\t[]string{", obj.Name())
							for _, wrapper := range wrappers {
								fmt.Fprintf(gi.out, "%q,", wrapper)
							}
							fmt.Fprint(gi.out, "},")
						}
					}
				}
			}
		}
	}
}

func (gi *genimport) writeInterfaceProxies() {
	path := gi.gpkg.Path()
	for _, name := range gi.names {
		obj := gi.scope.Lookup(name)
		if t := extractInterface(obj, true); t != nil {
			writeInterfaceProxy(gi.out, path, gi.suffix, name, t)
		}
	}
}

func (g *Globals) detectIntKind(path, name, str string) (string, string) {
	i, err := strconv.ParseInt(str, 0, 64)
	if err == nil {
		if i == int64(int32(i)) {
			// constant fits int32. We can use the default (i.e. int)
			// on both 32-bit and 64-bit platforms
			return "", ""
		} else if i == int64(uint32(i)) {
			// constant fits uint32
			return "uint32(", ")"
		} else {
			return "int64(", ")"
		}
	}
	_, err = strconv.ParseUint(str, 0, 64)
	if err == nil {
		return "uint64(", ")"
	}
	f, err := strconv.ParseFloat(str, 64)
	if err != nil {
		// nothing fits... leave the default
		return "", ""
	} else {
		prefix := "float64"
		f = math.Abs(f)
		if f == float64(float32(f)) && f <= math.MaxFloat32 && f >= math.SmallestNonzeroFloat32 {
			// float32 loses no precision vs. float64
			prefix = "float32"
		}
		g.Warnf("package %q: integer constant %s = %s overflows both int64 and uint64, converting to %s", path, name, str, prefix)
		return prefix + "(", ")"
	}
}
