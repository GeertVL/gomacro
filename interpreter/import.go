/*
 * gomacro - A Go intepreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * import.go
 *
 *  Created on Feb 27, 2017
 *      Author Massimiliano Ghilardi
 */

package interpreter

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/importer"
	"go/types"
	"io"
	"io/ioutil"
	"os"
	r "reflect"
	"strings"

	"github.com/cosmos72/gomacro/imports"
)

type Importer struct {
	from   types.ImporterFrom
	compat types.Importer
	srcDir string
	mode   types.ImportMode
}

func DefaultImporter() Importer {
	imp := Importer{}
	compat := importer.Default()
	if from, ok := imp.compat.(types.ImporterFrom); ok {
		imp.from = from
	} else {
		imp.compat = compat
	}
	return imp
}

func (imp *Importer) Import(path string) (*types.Package, error) {
	if imp.from != nil {
		return imp.from.ImportFrom(path, imp.srcDir, imp.mode)
	} else {
		return imp.compat.Import(path)
	}
}

func (imp *Importer) ImportFrom(path string, srcDir string, mode types.ImportMode) (*types.Package, error) {
	if imp.from != nil {
		return imp.from.ImportFrom(path, srcDir, mode)
	} else {
		return imp.compat.Import(path)
	}
}

func sanitizeIdentifier(str string) string {
	runes := []rune(str)
	for i, ch := range runes {
		if ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || ch == '_' ||
			i != 0 && ch >= '0' && ch <= '9' {
			continue
		}
		runes[i] = '_'
	}
	return string(runes)
}

func printPackageLoader(out io.Writer, path string, pkg *types.Package, init bool) {
	sanitizedPath := sanitizeIdentifier(path)

	scope := pkg.Scope()
	fmt.Fprintf(out, `// this file was generated by gomacro command: import %#v
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg %q
	. "reflect"
)

func Package_%s() (map[string]Value, map[string]Type) {
	return map[string]Value{`, path, path, sanitizedPath)
	names := scope.Names()
	for _, name := range names {
		obj := scope.Lookup(name)
		if !obj.Exported() {
			continue
		}
		switch obj.(type) {
		case *types.Func, *types.Const:
			fmt.Fprintf(out, `
		%q:	ValueOf(pkg.%s),`, name, name)
		case *types.Var:
			fmt.Fprintf(out, `
		%q:	ValueOf(&pkg.%s).Elem(),`,
				name, name)
		}
	}
	fmt.Fprintf(out, `
	}, map[string]Type{`)
	for _, name := range names {
		obj := scope.Lookup(name)
		if !obj.Exported() {
			continue
		}
		switch obj.(type) {
		case *types.TypeName:
			fmt.Fprintf(out, `
		%q:	TypeOf((*pkg.%s)(nil)).Elem(),`,
				name, name)
		}
	}
	fmt.Fprintf(out, `
	}
}
`)
	if !init {
		return
	}

	fmt.Fprintf(out, `
func init() {
	binds, types := Package_%s()
	Binds[%q] = binds
	Types[%q] = types
}`, sanitizedPath, path, path)
}

func (ir *Interpreter) createImportFile(path string, pkg *types.Package) {
	buf := bytes.Buffer{}
	printPackageLoader(&buf, path, pkg, true)

	filename := fmt.Sprintf("imports/%s.go", sanitizeIdentifier(path))
	ioutil.WriteFile(filename, buf.Bytes(), os.FileMode(0666))
	ir.Warnf("created file %q, at the moment it needs to be compiled together with gomacro before using the import", filename)
}

func (ir *Interpreter) ImportPackage(path string) *Env {
	if binds, ok := imports.Binds[path]; ok {
		if types, ok := imports.Types[path]; ok {

			return &Env{Binds: binds, Types: types}
		}
	}
	pkg, err := ir.Importer.Import(path)
	if err != nil {
		ir.Errorf("error importing %s: %v", path, err)
		return nil
	}
	ir.createImportFile(path, pkg)
	return nil
}

func (env *Env) evalImport(node ast.Spec) (r.Value, []r.Value) {
	switch node := node.(type) {
	case *ast.ImportSpec:
		path := unescapeString(node.Path.Value)
		var name string
		if node.Name != nil {
			name = node.Name.Name
		} else {
			name = path[1+strings.LastIndexByte(path, '/'):]
		}
		newEnv := env.ImportPackage(path)
		if newEnv == nil {
			return None, nil
		}

		fileEnv := env.FileEnv()
		newEnv.Outer = fileEnv.TopEnv()

		value := r.ValueOf(newEnv)
		fileEnv.defineConst(name, value.Type(), value)
		return r.ValueOf(path), nil
	default:
		return env.Errorf("unimplemented import: %v", node)
	}
}
