// this file was generated by gomacro command: import "github.com/cosmos72/gomacro/interpreter"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package interpreter

import (
	r "reflect"

	"github.com/cosmos72/gomacro/imports"
)

// reflection: allow interpreted code to import "github.com/cosmos72/gomacro/interpreter"
func init() {
	imports.Packages["github.com/cosmos72/gomacro/interpreter"] = imports.Package{
		Binds: map[string]r.Value{
			"New":                  r.ValueOf(New),
			"NewEnv":               r.ValueOf(NewEnv),
			"NewInterpreterCommon": r.ValueOf(NewInterpreterCommon),
			"Read":                 r.ValueOf(ReadBytes),
			"ReadMultiline":        r.ValueOf(ReadMultiline),
		},
		Types: map[string]r.Type{
			"Builtin":           r.TypeOf((*Builtin)(nil)).Elem(),
			"CallFrame":         r.TypeOf((*CallFrame)(nil)).Elem(),
			"CallStack":         r.TypeOf((*CallStack)(nil)).Elem(),
			"Cmd":               r.TypeOf((*Cmd)(nil)).Elem(),
			"Env":               r.TypeOf((*Env)(nil)).Elem(),
			"Error_builtin":     r.TypeOf((*Error_builtin)(nil)).Elem(),
			"Function":          r.TypeOf((*Function)(nil)).Elem(),
			"Inspector":         r.TypeOf((*Inspector)(nil)).Elem(),
			"InterpreterCommon": r.TypeOf((*InterpreterCommon)(nil)).Elem(),
			"Macro":             r.TypeOf((*Macro)(nil)).Elem(),
		},
		Proxies: map[string]r.Type{}}
}

func (env *Env) ChangePackage(name string) *Env {
	fenv := env.FileEnv()
	curr := fenv.InterpreterCommon.Packagename
	if name == curr {
		return env
	}
	fenv.Package.SaveToPackages(curr)

	nenv := NewEnv(fenv.TopEnv(), name)
	nenv.Package.Init()
	nenv.Package.Merge(imports.Packages[name])
	nenv.InterpreterCommon.Packagename = name

	return nenv
}
