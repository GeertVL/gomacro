// this file was generated by gomacro command: import "compress/zlib"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"compress/zlib"
	"io"
)

func init() {
	Packages["compress/zlib"] = Package{
	Binds: map[string]Value{
		"BestCompression":	ValueOf(zlib.BestCompression),
		"BestSpeed":	ValueOf(zlib.BestSpeed),
		"DefaultCompression":	ValueOf(zlib.DefaultCompression),
		"ErrChecksum":	ValueOf(&zlib.ErrChecksum).Elem(),
		"ErrDictionary":	ValueOf(&zlib.ErrDictionary).Elem(),
		"ErrHeader":	ValueOf(&zlib.ErrHeader).Elem(),
		"HuffmanOnly":	ValueOf(zlib.HuffmanOnly),
		"NewReader":	ValueOf(zlib.NewReader),
		"NewReaderDict":	ValueOf(zlib.NewReaderDict),
		"NewWriter":	ValueOf(zlib.NewWriter),
		"NewWriterLevel":	ValueOf(zlib.NewWriterLevel),
		"NewWriterLevelDict":	ValueOf(zlib.NewWriterLevelDict),
		"NoCompression":	ValueOf(zlib.NoCompression),
	},
	Types: map[string]Type{
		"Resetter":	TypeOf((*zlib.Resetter)(nil)).Elem(),
		"Writer":	TypeOf((*zlib.Writer)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"Resetter":	TypeOf((*Resetter_compress_zlib)(nil)).Elem(),
	} }
}

// --------------- proxy for compress/zlib.Resetter ---------------
type Resetter_compress_zlib struct {
	Reset_	func(r io.Reader, dict []byte) error
}
func (Obj Resetter_compress_zlib) Reset(r io.Reader, dict []byte) error {
	return Obj.Reset_(r, dict)
}
