// this file was generated by gomacro command: import "container/heap"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"container/heap"
)

func init() {
	Packages["container/heap"] = Package{
	Binds: map[string]Value{
		"Fix":	ValueOf(heap.Fix),
		"Init":	ValueOf(heap.Init),
		"Pop":	ValueOf(heap.Pop),
		"Push":	ValueOf(heap.Push),
		"Remove":	ValueOf(heap.Remove),
	},
	Types: map[string]Type{
		"Interface":	TypeOf((*heap.Interface)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"Interface":	TypeOf((*Interface_container_heap)(nil)).Elem(),
	} }
}

// --------------- proxy for container/heap.Interface ---------------
type Interface_container_heap struct {
	Object	interface{}
	Len_	func() int
	Less_	func(i int, j int) bool
	Pop_	func() interface{}
	Push_	func(x interface{}) 
	Swap_	func(i int, j int) 
}
func (Proxy *Interface_container_heap) Len() int {
	return Proxy.Len_()
}
func (Proxy *Interface_container_heap) Less(i int, j int) bool {
	return Proxy.Less_(i, j)
}
func (Proxy *Interface_container_heap) Pop() interface{} {
	return Proxy.Pop_()
}
func (Proxy *Interface_container_heap) Push(x interface{})  {
	Proxy.Push_(x)
}
func (Proxy *Interface_container_heap) Swap(i int, j int)  {
	Proxy.Swap_(i, j)
}
