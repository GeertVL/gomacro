// this file was generated by gomacro command: import "crypto/elliptic"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"crypto/elliptic"
	"math/big"
)

func init() {
	Packages["crypto/elliptic"] = Package{
	Binds: map[string]Value{
		"GenerateKey":	ValueOf(elliptic.GenerateKey),
		"Marshal":	ValueOf(elliptic.Marshal),
		"P224":	ValueOf(elliptic.P224),
		"P256":	ValueOf(elliptic.P256),
		"P384":	ValueOf(elliptic.P384),
		"P521":	ValueOf(elliptic.P521),
		"Unmarshal":	ValueOf(elliptic.Unmarshal),
	},
	Types: map[string]Type{
		"Curve":	TypeOf((*elliptic.Curve)(nil)).Elem(),
		"CurveParams":	TypeOf((*elliptic.CurveParams)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"Curve":	TypeOf((*Curve_crypto_elliptic)(nil)).Elem(),
	} }
}

// --------------- proxy for crypto/elliptic.Curve ---------------
type Curve_crypto_elliptic struct {
	Object	interface{}
	Add_	func(x1 *big.Int, y1 *big.Int, x2 *big.Int, y2 *big.Int) (x *big.Int, y *big.Int)
	Double_	func(x1 *big.Int, y1 *big.Int) (x *big.Int, y *big.Int)
	IsOnCurve_	func(x *big.Int, y *big.Int) bool
	Params_	func() *elliptic.CurveParams
	ScalarBaseMult_	func(k []byte) (x *big.Int, y *big.Int)
	ScalarMult_	func(x1 *big.Int, y1 *big.Int, k []byte) (x *big.Int, y *big.Int)
}
func (Proxy *Curve_crypto_elliptic) Add(x1 *big.Int, y1 *big.Int, x2 *big.Int, y2 *big.Int) (x *big.Int, y *big.Int) {
	return Proxy.Add_(x1, y1, x2, y2)
}
func (Proxy *Curve_crypto_elliptic) Double(x1 *big.Int, y1 *big.Int) (x *big.Int, y *big.Int) {
	return Proxy.Double_(x1, y1)
}
func (Proxy *Curve_crypto_elliptic) IsOnCurve(x *big.Int, y *big.Int) bool {
	return Proxy.IsOnCurve_(x, y)
}
func (Proxy *Curve_crypto_elliptic) Params() *elliptic.CurveParams {
	return Proxy.Params_()
}
func (Proxy *Curve_crypto_elliptic) ScalarBaseMult(k []byte) (x *big.Int, y *big.Int) {
	return Proxy.ScalarBaseMult_(k)
}
func (Proxy *Curve_crypto_elliptic) ScalarMult(x1 *big.Int, y1 *big.Int, k []byte) (x *big.Int, y *big.Int) {
	return Proxy.ScalarMult_(x1, y1, k)
}
