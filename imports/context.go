// this file was generated by gomacro command: import "context"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg "context"
	. "reflect"
)

func Package_context() (map[string]Value, map[string]Type) {
	return map[string]Value{
			"Background":       ValueOf(pkg.Background),
			"Canceled":         ValueOf(&pkg.Canceled).Elem(),
			"DeadlineExceeded": ValueOf(&pkg.DeadlineExceeded).Elem(),
			"TODO":             ValueOf(pkg.TODO),
			"WithCancel":       ValueOf(pkg.WithCancel),
			"WithDeadline":     ValueOf(pkg.WithDeadline),
			"WithTimeout":      ValueOf(pkg.WithTimeout),
			"WithValue":        ValueOf(pkg.WithValue),
		}, map[string]Type{
			"CancelFunc": TypeOf((*pkg.CancelFunc)(nil)).Elem(),
			"Context":    TypeOf((*pkg.Context)(nil)).Elem(),
		}
}

func init() {
	binds, types := Package_context()
	Binds["context"] = binds
	Types["context"] = types
}
