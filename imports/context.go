// this file was generated by gomacro command: import _b "context"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"context"
	"time"
)

// reflection: allow interpreted code to import "context"
func init() {
	Packages["context"] = Package{
	Binds: map[string]Value{
		"Background":	ValueOf(context.Background),
		"Canceled":	ValueOf(&context.Canceled).Elem(),
		"DeadlineExceeded":	ValueOf(&context.DeadlineExceeded).Elem(),
		"TODO":	ValueOf(context.TODO),
		"WithCancel":	ValueOf(context.WithCancel),
		"WithDeadline":	ValueOf(context.WithDeadline),
		"WithTimeout":	ValueOf(context.WithTimeout),
		"WithValue":	ValueOf(context.WithValue),
	},
	Types: map[string]Type{
		"CancelFunc":	TypeOf((*context.CancelFunc)(nil)).Elem(),
		"Context":	TypeOf((*context.Context)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"Context":	TypeOf((*Context_context)(nil)).Elem(),
	},
	Untypeds: map[string]string{
	},
	Wrappers: map[string][]string{
	} }
}

// --------------- proxy for context.Context ---------------
type Context_context struct {
	Object	interface{}
	Deadline_	func() (deadline time.Time, ok bool)
	Done_	func() <-chan struct{}
	Err_	func() error
	Value_	func(key interface{}) interface{}
}
func (Proxy *Context_context) Deadline() (deadline time.Time, ok bool) {
	return Proxy.Deadline_()
}
func (Proxy *Context_context) Done() <-chan struct{} {
	return Proxy.Done_()
}
func (Proxy *Context_context) Err() error {
	return Proxy.Err_()
}
func (Proxy *Context_context) Value(key interface{}) interface{} {
	return Proxy.Value_(key)
}
