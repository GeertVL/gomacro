// this file was generated by gomacro command: import "debug/macho"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg "debug/macho"
	. "reflect"
)

func Package_debug_macho() (map[string]Value, map[string]Type) {
	return map[string]Value{
			"Cpu386":            ValueOf(pkg.Cpu386),
			"CpuAmd64":          ValueOf(pkg.CpuAmd64),
			"CpuArm":            ValueOf(pkg.CpuArm),
			"CpuPpc":            ValueOf(pkg.CpuPpc),
			"CpuPpc64":          ValueOf(pkg.CpuPpc64),
			"ErrNotFat":         ValueOf(&pkg.ErrNotFat).Elem(),
			"LoadCmdDylib":      ValueOf(pkg.LoadCmdDylib),
			"LoadCmdDylinker":   ValueOf(pkg.LoadCmdDylinker),
			"LoadCmdDysymtab":   ValueOf(pkg.LoadCmdDysymtab),
			"LoadCmdSegment":    ValueOf(pkg.LoadCmdSegment),
			"LoadCmdSegment64":  ValueOf(pkg.LoadCmdSegment64),
			"LoadCmdSymtab":     ValueOf(pkg.LoadCmdSymtab),
			"LoadCmdThread":     ValueOf(pkg.LoadCmdThread),
			"LoadCmdUnixThread": ValueOf(pkg.LoadCmdUnixThread),
			"Magic32":           ValueOf(pkg.Magic32),
			"Magic64":           ValueOf(pkg.Magic64),
			"MagicFat":          ValueOf(pkg.MagicFat),
			"NewFatFile":        ValueOf(pkg.NewFatFile),
			"NewFile":           ValueOf(pkg.NewFile),
			"Open":              ValueOf(pkg.Open),
			"OpenFat":           ValueOf(pkg.OpenFat),
			"TypeBundle":        ValueOf(pkg.TypeBundle),
			"TypeDylib":         ValueOf(pkg.TypeDylib),
			"TypeExec":          ValueOf(pkg.TypeExec),
			"TypeObj":           ValueOf(pkg.TypeObj),
		}, map[string]Type{
			"Cpu":           TypeOf((*pkg.Cpu)(nil)).Elem(),
			"Dylib":         TypeOf((*pkg.Dylib)(nil)).Elem(),
			"DylibCmd":      TypeOf((*pkg.DylibCmd)(nil)).Elem(),
			"Dysymtab":      TypeOf((*pkg.Dysymtab)(nil)).Elem(),
			"DysymtabCmd":   TypeOf((*pkg.DysymtabCmd)(nil)).Elem(),
			"FatArch":       TypeOf((*pkg.FatArch)(nil)).Elem(),
			"FatArchHeader": TypeOf((*pkg.FatArchHeader)(nil)).Elem(),
			"FatFile":       TypeOf((*pkg.FatFile)(nil)).Elem(),
			"File":          TypeOf((*pkg.File)(nil)).Elem(),
			"FileHeader":    TypeOf((*pkg.FileHeader)(nil)).Elem(),
			"FormatError":   TypeOf((*pkg.FormatError)(nil)).Elem(),
			"Load":          TypeOf((*pkg.Load)(nil)).Elem(),
			"LoadBytes":     TypeOf((*pkg.LoadBytes)(nil)).Elem(),
			"LoadCmd":       TypeOf((*pkg.LoadCmd)(nil)).Elem(),
			"Nlist32":       TypeOf((*pkg.Nlist32)(nil)).Elem(),
			"Nlist64":       TypeOf((*pkg.Nlist64)(nil)).Elem(),
			"Regs386":       TypeOf((*pkg.Regs386)(nil)).Elem(),
			"RegsAMD64":     TypeOf((*pkg.RegsAMD64)(nil)).Elem(),
			"Section":       TypeOf((*pkg.Section)(nil)).Elem(),
			"Section32":     TypeOf((*pkg.Section32)(nil)).Elem(),
			"Section64":     TypeOf((*pkg.Section64)(nil)).Elem(),
			"SectionHeader": TypeOf((*pkg.SectionHeader)(nil)).Elem(),
			"Segment":       TypeOf((*pkg.Segment)(nil)).Elem(),
			"Segment32":     TypeOf((*pkg.Segment32)(nil)).Elem(),
			"Segment64":     TypeOf((*pkg.Segment64)(nil)).Elem(),
			"SegmentHeader": TypeOf((*pkg.SegmentHeader)(nil)).Elem(),
			"Symbol":        TypeOf((*pkg.Symbol)(nil)).Elem(),
			"Symtab":        TypeOf((*pkg.Symtab)(nil)).Elem(),
			"SymtabCmd":     TypeOf((*pkg.SymtabCmd)(nil)).Elem(),
			"Thread":        TypeOf((*pkg.Thread)(nil)).Elem(),
			"Type":          TypeOf((*pkg.Type)(nil)).Elem(),
		}
}

func init() {
	binds, types := Package_debug_macho()
	Binds["debug/macho"] = binds
	Types["debug/macho"] = types
}
