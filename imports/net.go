// this file was generated by gomacro command: import "net"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg "net"
	. "reflect"
)

func Package_net() (map[string]Value, map[string]Type) {
	return map[string]Value{
			"CIDRMask":                   ValueOf(pkg.CIDRMask),
			"DefaultResolver":            ValueOf(&pkg.DefaultResolver).Elem(),
			"Dial":                       ValueOf(pkg.Dial),
			"DialIP":                     ValueOf(pkg.DialIP),
			"DialTCP":                    ValueOf(pkg.DialTCP),
			"DialTimeout":                ValueOf(pkg.DialTimeout),
			"DialUDP":                    ValueOf(pkg.DialUDP),
			"DialUnix":                   ValueOf(pkg.DialUnix),
			"ErrWriteToConnected":        ValueOf(&pkg.ErrWriteToConnected).Elem(),
			"FileConn":                   ValueOf(pkg.FileConn),
			"FileListener":               ValueOf(pkg.FileListener),
			"FilePacketConn":             ValueOf(pkg.FilePacketConn),
			"FlagBroadcast":              ValueOf(pkg.FlagBroadcast),
			"FlagLoopback":               ValueOf(pkg.FlagLoopback),
			"FlagMulticast":              ValueOf(pkg.FlagMulticast),
			"FlagPointToPoint":           ValueOf(pkg.FlagPointToPoint),
			"FlagUp":                     ValueOf(pkg.FlagUp),
			"IPv4":                       ValueOf(pkg.IPv4),
			"IPv4Mask":                   ValueOf(pkg.IPv4Mask),
			"IPv4allrouter":              ValueOf(&pkg.IPv4allrouter).Elem(),
			"IPv4allsys":                 ValueOf(&pkg.IPv4allsys).Elem(),
			"IPv4bcast":                  ValueOf(&pkg.IPv4bcast).Elem(),
			"IPv4len":                    ValueOf(pkg.IPv4len),
			"IPv4zero":                   ValueOf(&pkg.IPv4zero).Elem(),
			"IPv6interfacelocalallnodes": ValueOf(&pkg.IPv6interfacelocalallnodes).Elem(),
			"IPv6len":                    ValueOf(pkg.IPv6len),
			"IPv6linklocalallnodes":      ValueOf(&pkg.IPv6linklocalallnodes).Elem(),
			"IPv6linklocalallrouters":    ValueOf(&pkg.IPv6linklocalallrouters).Elem(),
			"IPv6loopback":               ValueOf(&pkg.IPv6loopback).Elem(),
			"IPv6unspecified":            ValueOf(&pkg.IPv6unspecified).Elem(),
			"IPv6zero":                   ValueOf(&pkg.IPv6zero).Elem(),
			"InterfaceAddrs":             ValueOf(pkg.InterfaceAddrs),
			"InterfaceByIndex":           ValueOf(pkg.InterfaceByIndex),
			"InterfaceByName":            ValueOf(pkg.InterfaceByName),
			"Interfaces":                 ValueOf(pkg.Interfaces),
			"JoinHostPort":               ValueOf(pkg.JoinHostPort),
			"Listen":                     ValueOf(pkg.Listen),
			"ListenIP":                   ValueOf(pkg.ListenIP),
			"ListenMulticastUDP":         ValueOf(pkg.ListenMulticastUDP),
			"ListenPacket":               ValueOf(pkg.ListenPacket),
			"ListenTCP":                  ValueOf(pkg.ListenTCP),
			"ListenUDP":                  ValueOf(pkg.ListenUDP),
			"ListenUnix":                 ValueOf(pkg.ListenUnix),
			"ListenUnixgram":             ValueOf(pkg.ListenUnixgram),
			"LookupAddr":                 ValueOf(pkg.LookupAddr),
			"LookupCNAME":                ValueOf(pkg.LookupCNAME),
			"LookupHost":                 ValueOf(pkg.LookupHost),
			"LookupIP":                   ValueOf(pkg.LookupIP),
			"LookupMX":                   ValueOf(pkg.LookupMX),
			"LookupNS":                   ValueOf(pkg.LookupNS),
			"LookupPort":                 ValueOf(pkg.LookupPort),
			"LookupSRV":                  ValueOf(pkg.LookupSRV),
			"LookupTXT":                  ValueOf(pkg.LookupTXT),
			"ParseCIDR":                  ValueOf(pkg.ParseCIDR),
			"ParseIP":                    ValueOf(pkg.ParseIP),
			"ParseMAC":                   ValueOf(pkg.ParseMAC),
			"Pipe":                       ValueOf(pkg.Pipe),
			"ResolveIPAddr":              ValueOf(pkg.ResolveIPAddr),
			"ResolveTCPAddr":             ValueOf(pkg.ResolveTCPAddr),
			"ResolveUDPAddr":             ValueOf(pkg.ResolveUDPAddr),
			"ResolveUnixAddr":            ValueOf(pkg.ResolveUnixAddr),
			"SplitHostPort":              ValueOf(pkg.SplitHostPort),
		}, map[string]Type{
			"Addr":                TypeOf((*pkg.Addr)(nil)).Elem(),
			"AddrError":           TypeOf((*pkg.AddrError)(nil)).Elem(),
			"Buffers":             TypeOf((*pkg.Buffers)(nil)).Elem(),
			"Conn":                TypeOf((*pkg.Conn)(nil)).Elem(),
			"DNSConfigError":      TypeOf((*pkg.DNSConfigError)(nil)).Elem(),
			"DNSError":            TypeOf((*pkg.DNSError)(nil)).Elem(),
			"Dialer":              TypeOf((*pkg.Dialer)(nil)).Elem(),
			"Error":               TypeOf((*pkg.Error)(nil)).Elem(),
			"Flags":               TypeOf((*pkg.Flags)(nil)).Elem(),
			"HardwareAddr":        TypeOf((*pkg.HardwareAddr)(nil)).Elem(),
			"IP":                  TypeOf((*pkg.IP)(nil)).Elem(),
			"IPAddr":              TypeOf((*pkg.IPAddr)(nil)).Elem(),
			"IPConn":              TypeOf((*pkg.IPConn)(nil)).Elem(),
			"IPMask":              TypeOf((*pkg.IPMask)(nil)).Elem(),
			"IPNet":               TypeOf((*pkg.IPNet)(nil)).Elem(),
			"Interface":           TypeOf((*pkg.Interface)(nil)).Elem(),
			"InvalidAddrError":    TypeOf((*pkg.InvalidAddrError)(nil)).Elem(),
			"Listener":            TypeOf((*pkg.Listener)(nil)).Elem(),
			"MX":                  TypeOf((*pkg.MX)(nil)).Elem(),
			"NS":                  TypeOf((*pkg.NS)(nil)).Elem(),
			"OpError":             TypeOf((*pkg.OpError)(nil)).Elem(),
			"PacketConn":          TypeOf((*pkg.PacketConn)(nil)).Elem(),
			"ParseError":          TypeOf((*pkg.ParseError)(nil)).Elem(),
			"Resolver":            TypeOf((*pkg.Resolver)(nil)).Elem(),
			"SRV":                 TypeOf((*pkg.SRV)(nil)).Elem(),
			"TCPAddr":             TypeOf((*pkg.TCPAddr)(nil)).Elem(),
			"TCPConn":             TypeOf((*pkg.TCPConn)(nil)).Elem(),
			"TCPListener":         TypeOf((*pkg.TCPListener)(nil)).Elem(),
			"UDPAddr":             TypeOf((*pkg.UDPAddr)(nil)).Elem(),
			"UDPConn":             TypeOf((*pkg.UDPConn)(nil)).Elem(),
			"UnixAddr":            TypeOf((*pkg.UnixAddr)(nil)).Elem(),
			"UnixConn":            TypeOf((*pkg.UnixConn)(nil)).Elem(),
			"UnixListener":        TypeOf((*pkg.UnixListener)(nil)).Elem(),
			"UnknownNetworkError": TypeOf((*pkg.UnknownNetworkError)(nil)).Elem(),
		}
}

func init() {
	binds, types := Package_net()
	Binds["net"] = binds
	Types["net"] = types
}
