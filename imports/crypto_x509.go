// this file was generated by gomacro command: import "crypto/x509"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg "crypto/x509"
	. "reflect"
)

func Package_crypto_x509() (map[string]Value, map[string]Type) {
	return map[string]Value{
			"CANotAuthorizedForThisName": ValueOf(pkg.CANotAuthorizedForThisName),
			"CreateCertificate":          ValueOf(pkg.CreateCertificate),
			"CreateCertificateRequest":   ValueOf(pkg.CreateCertificateRequest),
			"DSA":                                   ValueOf(pkg.DSA),
			"DSAWithSHA1":                           ValueOf(pkg.DSAWithSHA1),
			"DSAWithSHA256":                         ValueOf(pkg.DSAWithSHA256),
			"DecryptPEMBlock":                       ValueOf(pkg.DecryptPEMBlock),
			"ECDSA":                                 ValueOf(pkg.ECDSA),
			"ECDSAWithSHA1":                         ValueOf(pkg.ECDSAWithSHA1),
			"ECDSAWithSHA256":                       ValueOf(pkg.ECDSAWithSHA256),
			"ECDSAWithSHA384":                       ValueOf(pkg.ECDSAWithSHA384),
			"ECDSAWithSHA512":                       ValueOf(pkg.ECDSAWithSHA512),
			"EncryptPEMBlock":                       ValueOf(pkg.EncryptPEMBlock),
			"ErrUnsupportedAlgorithm":               ValueOf(&pkg.ErrUnsupportedAlgorithm).Elem(),
			"Expired":                               ValueOf(pkg.Expired),
			"ExtKeyUsageAny":                        ValueOf(pkg.ExtKeyUsageAny),
			"ExtKeyUsageClientAuth":                 ValueOf(pkg.ExtKeyUsageClientAuth),
			"ExtKeyUsageCodeSigning":                ValueOf(pkg.ExtKeyUsageCodeSigning),
			"ExtKeyUsageEmailProtection":            ValueOf(pkg.ExtKeyUsageEmailProtection),
			"ExtKeyUsageIPSECEndSystem":             ValueOf(pkg.ExtKeyUsageIPSECEndSystem),
			"ExtKeyUsageIPSECTunnel":                ValueOf(pkg.ExtKeyUsageIPSECTunnel),
			"ExtKeyUsageIPSECUser":                  ValueOf(pkg.ExtKeyUsageIPSECUser),
			"ExtKeyUsageMicrosoftServerGatedCrypto": ValueOf(pkg.ExtKeyUsageMicrosoftServerGatedCrypto),
			"ExtKeyUsageNetscapeServerGatedCrypto":  ValueOf(pkg.ExtKeyUsageNetscapeServerGatedCrypto),
			"ExtKeyUsageOCSPSigning":                ValueOf(pkg.ExtKeyUsageOCSPSigning),
			"ExtKeyUsageServerAuth":                 ValueOf(pkg.ExtKeyUsageServerAuth),
			"ExtKeyUsageTimeStamping":               ValueOf(pkg.ExtKeyUsageTimeStamping),
			"IncompatibleUsage":                     ValueOf(pkg.IncompatibleUsage),
			"IncorrectPasswordError":                ValueOf(&pkg.IncorrectPasswordError).Elem(),
			"IsEncryptedPEMBlock":                   ValueOf(pkg.IsEncryptedPEMBlock),
			"KeyUsageCRLSign":                       ValueOf(pkg.KeyUsageCRLSign),
			"KeyUsageCertSign":                      ValueOf(pkg.KeyUsageCertSign),
			"KeyUsageContentCommitment":             ValueOf(pkg.KeyUsageContentCommitment),
			"KeyUsageDataEncipherment":              ValueOf(pkg.KeyUsageDataEncipherment),
			"KeyUsageDecipherOnly":                  ValueOf(pkg.KeyUsageDecipherOnly),
			"KeyUsageDigitalSignature":              ValueOf(pkg.KeyUsageDigitalSignature),
			"KeyUsageEncipherOnly":                  ValueOf(pkg.KeyUsageEncipherOnly),
			"KeyUsageKeyAgreement":                  ValueOf(pkg.KeyUsageKeyAgreement),
			"KeyUsageKeyEncipherment":               ValueOf(pkg.KeyUsageKeyEncipherment),
			"MD2WithRSA":                            ValueOf(pkg.MD2WithRSA),
			"MD5WithRSA":                            ValueOf(pkg.MD5WithRSA),
			"MarshalECPrivateKey":                   ValueOf(pkg.MarshalECPrivateKey),
			"MarshalPKCS1PrivateKey":                ValueOf(pkg.MarshalPKCS1PrivateKey),
			"MarshalPKIXPublicKey":                  ValueOf(pkg.MarshalPKIXPublicKey),
			"NameMismatch":                          ValueOf(pkg.NameMismatch),
			"NewCertPool":                           ValueOf(pkg.NewCertPool),
			"NotAuthorizedToSign":                   ValueOf(pkg.NotAuthorizedToSign),
			"PEMCipher3DES":                         ValueOf(pkg.PEMCipher3DES),
			"PEMCipherAES128":                       ValueOf(pkg.PEMCipherAES128),
			"PEMCipherAES192":                       ValueOf(pkg.PEMCipherAES192),
			"PEMCipherAES256":                       ValueOf(pkg.PEMCipherAES256),
			"PEMCipherDES":                          ValueOf(pkg.PEMCipherDES),
			"ParseCRL":                              ValueOf(pkg.ParseCRL),
			"ParseCertificate":                      ValueOf(pkg.ParseCertificate),
			"ParseCertificateRequest":               ValueOf(pkg.ParseCertificateRequest),
			"ParseCertificates":                     ValueOf(pkg.ParseCertificates),
			"ParseDERCRL":                           ValueOf(pkg.ParseDERCRL),
			"ParseECPrivateKey":                     ValueOf(pkg.ParseECPrivateKey),
			"ParsePKCS1PrivateKey":                  ValueOf(pkg.ParsePKCS1PrivateKey),
			"ParsePKCS8PrivateKey":                  ValueOf(pkg.ParsePKCS8PrivateKey),
			"ParsePKIXPublicKey":                    ValueOf(pkg.ParsePKIXPublicKey),
			"RSA":                                   ValueOf(pkg.RSA),
			"SHA1WithRSA":                           ValueOf(pkg.SHA1WithRSA),
			"SHA256WithRSA":                         ValueOf(pkg.SHA256WithRSA),
			"SHA256WithRSAPSS":                      ValueOf(pkg.SHA256WithRSAPSS),
			"SHA384WithRSA":                         ValueOf(pkg.SHA384WithRSA),
			"SHA384WithRSAPSS":                      ValueOf(pkg.SHA384WithRSAPSS),
			"SHA512WithRSA":                         ValueOf(pkg.SHA512WithRSA),
			"SHA512WithRSAPSS":                      ValueOf(pkg.SHA512WithRSAPSS),
			"SystemCertPool":                        ValueOf(pkg.SystemCertPool),
			"TooManyIntermediates":                  ValueOf(pkg.TooManyIntermediates),
			"UnknownPublicKeyAlgorithm":             ValueOf(pkg.UnknownPublicKeyAlgorithm),
			"UnknownSignatureAlgorithm":             ValueOf(pkg.UnknownSignatureAlgorithm),
		}, map[string]Type{
			"CertPool":                   TypeOf((*pkg.CertPool)(nil)).Elem(),
			"Certificate":                TypeOf((*pkg.Certificate)(nil)).Elem(),
			"CertificateInvalidError":    TypeOf((*pkg.CertificateInvalidError)(nil)).Elem(),
			"CertificateRequest":         TypeOf((*pkg.CertificateRequest)(nil)).Elem(),
			"ConstraintViolationError":   TypeOf((*pkg.ConstraintViolationError)(nil)).Elem(),
			"ExtKeyUsage":                TypeOf((*pkg.ExtKeyUsage)(nil)).Elem(),
			"HostnameError":              TypeOf((*pkg.HostnameError)(nil)).Elem(),
			"InsecureAlgorithmError":     TypeOf((*pkg.InsecureAlgorithmError)(nil)).Elem(),
			"InvalidReason":              TypeOf((*pkg.InvalidReason)(nil)).Elem(),
			"KeyUsage":                   TypeOf((*pkg.KeyUsage)(nil)).Elem(),
			"PEMCipher":                  TypeOf((*pkg.PEMCipher)(nil)).Elem(),
			"PublicKeyAlgorithm":         TypeOf((*pkg.PublicKeyAlgorithm)(nil)).Elem(),
			"SignatureAlgorithm":         TypeOf((*pkg.SignatureAlgorithm)(nil)).Elem(),
			"SystemRootsError":           TypeOf((*pkg.SystemRootsError)(nil)).Elem(),
			"UnhandledCriticalExtension": TypeOf((*pkg.UnhandledCriticalExtension)(nil)).Elem(),
			"UnknownAuthorityError":      TypeOf((*pkg.UnknownAuthorityError)(nil)).Elem(),
			"VerifyOptions":              TypeOf((*pkg.VerifyOptions)(nil)).Elem(),
		}
}

func init() {
	binds, types := Package_crypto_x509()
	Binds["crypto/x509"] = binds
	Types["crypto/x509"] = types
}
