// this file was generated by gomacro command: import "database/sql"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"database/sql"
)

func init() {
	Packages["database/sql"] = Package{
	Binds: map[string]Value{
		"Drivers":	ValueOf(sql.Drivers),
		"ErrNoRows":	ValueOf(&sql.ErrNoRows).Elem(),
		"ErrTxDone":	ValueOf(&sql.ErrTxDone).Elem(),
		"LevelDefault":	ValueOf(sql.LevelDefault),
		"LevelLinearizable":	ValueOf(sql.LevelLinearizable),
		"LevelReadCommitted":	ValueOf(sql.LevelReadCommitted),
		"LevelReadUncommitted":	ValueOf(sql.LevelReadUncommitted),
		"LevelRepeatableRead":	ValueOf(sql.LevelRepeatableRead),
		"LevelSerializable":	ValueOf(sql.LevelSerializable),
		"LevelSnapshot":	ValueOf(sql.LevelSnapshot),
		"LevelWriteCommitted":	ValueOf(sql.LevelWriteCommitted),
		"Named":	ValueOf(sql.Named),
		"Open":	ValueOf(sql.Open),
		"Register":	ValueOf(sql.Register),
	},
	Types: map[string]Type{
		"ColumnType":	TypeOf((*sql.ColumnType)(nil)).Elem(),
		"DB":	TypeOf((*sql.DB)(nil)).Elem(),
		"DBStats":	TypeOf((*sql.DBStats)(nil)).Elem(),
		"IsolationLevel":	TypeOf((*sql.IsolationLevel)(nil)).Elem(),
		"NamedArg":	TypeOf((*sql.NamedArg)(nil)).Elem(),
		"NullBool":	TypeOf((*sql.NullBool)(nil)).Elem(),
		"NullFloat64":	TypeOf((*sql.NullFloat64)(nil)).Elem(),
		"NullInt64":	TypeOf((*sql.NullInt64)(nil)).Elem(),
		"NullString":	TypeOf((*sql.NullString)(nil)).Elem(),
		"RawBytes":	TypeOf((*sql.RawBytes)(nil)).Elem(),
		"Result":	TypeOf((*sql.Result)(nil)).Elem(),
		"Row":	TypeOf((*sql.Row)(nil)).Elem(),
		"Rows":	TypeOf((*sql.Rows)(nil)).Elem(),
		"Scanner":	TypeOf((*sql.Scanner)(nil)).Elem(),
		"Stmt":	TypeOf((*sql.Stmt)(nil)).Elem(),
		"Tx":	TypeOf((*sql.Tx)(nil)).Elem(),
		"TxOptions":	TypeOf((*sql.TxOptions)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"Result":	TypeOf((*Result_database_sql)(nil)).Elem(),
		"Scanner":	TypeOf((*Scanner_database_sql)(nil)).Elem(),
	} }
}

// --------------- proxy for database/sql.Result ---------------
type Result_database_sql struct {
	Object	interface{}
	LastInsertId_	func() (int64, error)
	RowsAffected_	func() (int64, error)
}
func (Proxy Result_database_sql) LastInsertId() (int64, error) {
	return Proxy.LastInsertId_()
}
func (Proxy Result_database_sql) RowsAffected() (int64, error) {
	return Proxy.RowsAffected_()
}

// --------------- proxy for database/sql.Scanner ---------------
type Scanner_database_sql struct {
	Object	interface{}
	Scan_	func(src interface{}) error
}
func (Proxy Scanner_database_sql) Scan(src interface{}) error {
	return Proxy.Scan_(src)
}
