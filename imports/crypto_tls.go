// this file was generated by gomacro command: import "crypto/tls"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg "crypto/tls"
	. "reflect"
)

func Package_crypto_tls() (map[string]Value, map[string]Type) {
	return map[string]Value{
			"Client":                     ValueOf(pkg.Client),
			"CurveP256":                  ValueOf(pkg.CurveP256),
			"CurveP384":                  ValueOf(pkg.CurveP384),
			"CurveP521":                  ValueOf(pkg.CurveP521),
			"Dial":                       ValueOf(pkg.Dial),
			"DialWithDialer":             ValueOf(pkg.DialWithDialer),
			"ECDSAWithP256AndSHA256":     ValueOf(pkg.ECDSAWithP256AndSHA256),
			"ECDSAWithP384AndSHA384":     ValueOf(pkg.ECDSAWithP384AndSHA384),
			"ECDSAWithP521AndSHA512":     ValueOf(pkg.ECDSAWithP521AndSHA512),
			"Listen":                     ValueOf(pkg.Listen),
			"LoadX509KeyPair":            ValueOf(pkg.LoadX509KeyPair),
			"NewLRUClientSessionCache":   ValueOf(pkg.NewLRUClientSessionCache),
			"NewListener":                ValueOf(pkg.NewListener),
			"NoClientCert":               ValueOf(pkg.NoClientCert),
			"PKCS1WithSHA1":              ValueOf(pkg.PKCS1WithSHA1),
			"PKCS1WithSHA256":            ValueOf(pkg.PKCS1WithSHA256),
			"PKCS1WithSHA384":            ValueOf(pkg.PKCS1WithSHA384),
			"PKCS1WithSHA512":            ValueOf(pkg.PKCS1WithSHA512),
			"PSSWithSHA256":              ValueOf(pkg.PSSWithSHA256),
			"PSSWithSHA384":              ValueOf(pkg.PSSWithSHA384),
			"PSSWithSHA512":              ValueOf(pkg.PSSWithSHA512),
			"RenegotiateFreelyAsClient":  ValueOf(pkg.RenegotiateFreelyAsClient),
			"RenegotiateNever":           ValueOf(pkg.RenegotiateNever),
			"RenegotiateOnceAsClient":    ValueOf(pkg.RenegotiateOnceAsClient),
			"RequestClientCert":          ValueOf(pkg.RequestClientCert),
			"RequireAndVerifyClientCert": ValueOf(pkg.RequireAndVerifyClientCert),
			"RequireAnyClientCert":       ValueOf(pkg.RequireAnyClientCert),
			"Server":                     ValueOf(pkg.Server),
			"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":    ValueOf(pkg.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA),
			"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256": ValueOf(pkg.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256),
			"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256": ValueOf(pkg.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256),
			"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":    ValueOf(pkg.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA),
			"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384": ValueOf(pkg.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384),
			"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305":  ValueOf(pkg.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305),
			"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":        ValueOf(pkg.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA),
			"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":     ValueOf(pkg.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA),
			"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":      ValueOf(pkg.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA),
			"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256":   ValueOf(pkg.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256),
			"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":   ValueOf(pkg.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256),
			"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":      ValueOf(pkg.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA),
			"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":   ValueOf(pkg.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384),
			"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305":    ValueOf(pkg.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305),
			"TLS_ECDHE_RSA_WITH_RC4_128_SHA":          ValueOf(pkg.TLS_ECDHE_RSA_WITH_RC4_128_SHA),
			"TLS_FALLBACK_SCSV":                       ValueOf(pkg.TLS_FALLBACK_SCSV),
			"TLS_RSA_WITH_3DES_EDE_CBC_SHA":           ValueOf(pkg.TLS_RSA_WITH_3DES_EDE_CBC_SHA),
			"TLS_RSA_WITH_AES_128_CBC_SHA":            ValueOf(pkg.TLS_RSA_WITH_AES_128_CBC_SHA),
			"TLS_RSA_WITH_AES_128_CBC_SHA256":         ValueOf(pkg.TLS_RSA_WITH_AES_128_CBC_SHA256),
			"TLS_RSA_WITH_AES_128_GCM_SHA256":         ValueOf(pkg.TLS_RSA_WITH_AES_128_GCM_SHA256),
			"TLS_RSA_WITH_AES_256_CBC_SHA":            ValueOf(pkg.TLS_RSA_WITH_AES_256_CBC_SHA),
			"TLS_RSA_WITH_AES_256_GCM_SHA384":         ValueOf(pkg.TLS_RSA_WITH_AES_256_GCM_SHA384),
			"TLS_RSA_WITH_RC4_128_SHA":                ValueOf(pkg.TLS_RSA_WITH_RC4_128_SHA),
			"VerifyClientCertIfGiven":                 ValueOf(pkg.VerifyClientCertIfGiven),
			"VersionSSL30":                            ValueOf(pkg.VersionSSL30),
			"VersionTLS10":                            ValueOf(pkg.VersionTLS10),
			"VersionTLS11":                            ValueOf(pkg.VersionTLS11),
			"VersionTLS12":                            ValueOf(pkg.VersionTLS12),
			"X25519":                                  ValueOf(pkg.X25519),
			"X509KeyPair":                             ValueOf(pkg.X509KeyPair),
		}, map[string]Type{
			"Certificate":            TypeOf((*pkg.Certificate)(nil)).Elem(),
			"CertificateRequestInfo": TypeOf((*pkg.CertificateRequestInfo)(nil)).Elem(),
			"ClientAuthType":         TypeOf((*pkg.ClientAuthType)(nil)).Elem(),
			"ClientHelloInfo":        TypeOf((*pkg.ClientHelloInfo)(nil)).Elem(),
			"ClientSessionCache":     TypeOf((*pkg.ClientSessionCache)(nil)).Elem(),
			"ClientSessionState":     TypeOf((*pkg.ClientSessionState)(nil)).Elem(),
			"Config":                 TypeOf((*pkg.Config)(nil)).Elem(),
			"Conn":                   TypeOf((*pkg.Conn)(nil)).Elem(),
			"ConnectionState":        TypeOf((*pkg.ConnectionState)(nil)).Elem(),
			"CurveID":                TypeOf((*pkg.CurveID)(nil)).Elem(),
			"RecordHeaderError":      TypeOf((*pkg.RecordHeaderError)(nil)).Elem(),
			"RenegotiationSupport":   TypeOf((*pkg.RenegotiationSupport)(nil)).Elem(),
			"SignatureScheme":        TypeOf((*pkg.SignatureScheme)(nil)).Elem(),
		}
}

func init() {
	binds, types := Package_crypto_tls()
	Binds["crypto/tls"] = binds
	Types["crypto/tls"] = types
}
