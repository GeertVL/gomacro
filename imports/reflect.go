// this file was generated by gomacro command: import "reflect"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"reflect"
)

func init() {
	Packages["reflect"] = Package{
	Binds: map[string]Value{
		"Append":	ValueOf(reflect.Append),
		"AppendSlice":	ValueOf(reflect.AppendSlice),
		"Array":	ValueOf(reflect.Array),
		"ArrayOf":	ValueOf(reflect.ArrayOf),
		"Bool":	ValueOf(reflect.Bool),
		"BothDir":	ValueOf(reflect.BothDir),
		"Chan":	ValueOf(reflect.Chan),
		"ChanOf":	ValueOf(reflect.ChanOf),
		"Complex128":	ValueOf(reflect.Complex128),
		"Complex64":	ValueOf(reflect.Complex64),
		"Copy":	ValueOf(reflect.Copy),
		"DeepEqual":	ValueOf(reflect.DeepEqual),
		"Float32":	ValueOf(reflect.Float32),
		"Float64":	ValueOf(reflect.Float64),
		"Func":	ValueOf(reflect.Func),
		"FuncOf":	ValueOf(reflect.FuncOf),
		"Indirect":	ValueOf(reflect.Indirect),
		"Int":	ValueOf(reflect.Int),
		"Int16":	ValueOf(reflect.Int16),
		"Int32":	ValueOf(reflect.Int32),
		"Int64":	ValueOf(reflect.Int64),
		"Int8":	ValueOf(reflect.Int8),
		"Interface":	ValueOf(reflect.Interface),
		"Invalid":	ValueOf(reflect.Invalid),
		"MakeChan":	ValueOf(reflect.MakeChan),
		"MakeFunc":	ValueOf(reflect.MakeFunc),
		"MakeMap":	ValueOf(reflect.MakeMap),
		"MakeSlice":	ValueOf(reflect.MakeSlice),
		"Map":	ValueOf(reflect.Map),
		"MapOf":	ValueOf(reflect.MapOf),
		"New":	ValueOf(reflect.New),
		"NewAt":	ValueOf(reflect.NewAt),
		"Ptr":	ValueOf(reflect.Ptr),
		"PtrTo":	ValueOf(reflect.PtrTo),
		"RecvDir":	ValueOf(reflect.RecvDir),
		"Select":	ValueOf(reflect.Select),
		"SelectDefault":	ValueOf(reflect.SelectDefault),
		"SelectRecv":	ValueOf(reflect.SelectRecv),
		"SelectSend":	ValueOf(reflect.SelectSend),
		"SendDir":	ValueOf(reflect.SendDir),
		"Slice":	ValueOf(reflect.Slice),
		"SliceOf":	ValueOf(reflect.SliceOf),
		"String":	ValueOf(reflect.String),
		"Struct":	ValueOf(reflect.Struct),
		"StructOf":	ValueOf(reflect.StructOf),
		"Swapper":	ValueOf(reflect.Swapper),
		"TypeOf":	ValueOf(reflect.TypeOf),
		"Uint":	ValueOf(reflect.Uint),
		"Uint16":	ValueOf(reflect.Uint16),
		"Uint32":	ValueOf(reflect.Uint32),
		"Uint64":	ValueOf(reflect.Uint64),
		"Uint8":	ValueOf(reflect.Uint8),
		"Uintptr":	ValueOf(reflect.Uintptr),
		"UnsafePointer":	ValueOf(reflect.UnsafePointer),
		"ValueOf":	ValueOf(reflect.ValueOf),
		"Zero":	ValueOf(reflect.Zero),
	},
	Types: map[string]Type{
		"ChanDir":	TypeOf((*reflect.ChanDir)(nil)).Elem(),
		"Kind":	TypeOf((*reflect.Kind)(nil)).Elem(),
		"Method":	TypeOf((*reflect.Method)(nil)).Elem(),
		"SelectCase":	TypeOf((*reflect.SelectCase)(nil)).Elem(),
		"SelectDir":	TypeOf((*reflect.SelectDir)(nil)).Elem(),
		"SliceHeader":	TypeOf((*reflect.SliceHeader)(nil)).Elem(),
		"StringHeader":	TypeOf((*reflect.StringHeader)(nil)).Elem(),
		"StructField":	TypeOf((*reflect.StructField)(nil)).Elem(),
		"StructTag":	TypeOf((*reflect.StructTag)(nil)).Elem(),
		"Type":	TypeOf((*reflect.Type)(nil)).Elem(),
		"Value":	TypeOf((*reflect.Value)(nil)).Elem(),
		"ValueError":	TypeOf((*reflect.ValueError)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"Type":	TypeOf((*Type_reflect)(nil)).Elem(),
	} }
}

// --------------- proxy for reflect.Type ---------------
type Type_reflect struct {
	Object	interface{}
	Align_	func() int
	AssignableTo_	func(u reflect.Type) bool
	Bits_	func() int
	ChanDir_	func() reflect.ChanDir
	Comparable_	func() bool
	ConvertibleTo_	func(u reflect.Type) bool
	Elem_	func() reflect.Type
	Field_	func(i int) reflect.StructField
	FieldAlign_	func() int
	FieldByIndex_	func(index []int) reflect.StructField
	FieldByName_	func(name string) (reflect.StructField, bool)
	FieldByNameFunc_	func(match func(string) bool) (reflect.StructField, bool)
	Implements_	func(u reflect.Type) bool
	In_	func(i int) reflect.Type
	IsVariadic_	func() bool
	Key_	func() reflect.Type
	Kind_	func() reflect.Kind
	Len_	func() int
	Method_	func(int) reflect.Method
	MethodByName_	func(string) (reflect.Method, bool)
	Name_	func() string
	NumField_	func() int
	NumIn_	func() int
	NumMethod_	func() int
	NumOut_	func() int
	Out_	func(i int) reflect.Type
	PkgPath_	func() string
	Size_	func() uintptr
	String_	func() string
}
func (Proxy Type_reflect) Align() int {
	return Proxy.Align_()
}
func (Proxy Type_reflect) AssignableTo(u reflect.Type) bool {
	return Proxy.AssignableTo_(u)
}
func (Proxy Type_reflect) Bits() int {
	return Proxy.Bits_()
}
func (Proxy Type_reflect) ChanDir() reflect.ChanDir {
	return Proxy.ChanDir_()
}
func (Proxy Type_reflect) Comparable() bool {
	return Proxy.Comparable_()
}
func (Proxy Type_reflect) ConvertibleTo(u reflect.Type) bool {
	return Proxy.ConvertibleTo_(u)
}
func (Proxy Type_reflect) Elem() reflect.Type {
	return Proxy.Elem_()
}
func (Proxy Type_reflect) Field(i int) reflect.StructField {
	return Proxy.Field_(i)
}
func (Proxy Type_reflect) FieldAlign() int {
	return Proxy.FieldAlign_()
}
func (Proxy Type_reflect) FieldByIndex(index []int) reflect.StructField {
	return Proxy.FieldByIndex_(index)
}
func (Proxy Type_reflect) FieldByName(name string) (reflect.StructField, bool) {
	return Proxy.FieldByName_(name)
}
func (Proxy Type_reflect) FieldByNameFunc(match func(string) bool) (reflect.StructField, bool) {
	return Proxy.FieldByNameFunc_(match)
}
func (Proxy Type_reflect) Implements(u reflect.Type) bool {
	return Proxy.Implements_(u)
}
func (Proxy Type_reflect) In(i int) reflect.Type {
	return Proxy.In_(i)
}
func (Proxy Type_reflect) IsVariadic() bool {
	return Proxy.IsVariadic_()
}
func (Proxy Type_reflect) Key() reflect.Type {
	return Proxy.Key_()
}
func (Proxy Type_reflect) Kind() reflect.Kind {
	return Proxy.Kind_()
}
func (Proxy Type_reflect) Len() int {
	return Proxy.Len_()
}
func (Proxy Type_reflect) Method(unnamed0 int) reflect.Method {
	return Proxy.Method_(unnamed0)
}
func (Proxy Type_reflect) MethodByName(unnamed0 string) (reflect.Method, bool) {
	return Proxy.MethodByName_(unnamed0)
}
func (Proxy Type_reflect) Name() string {
	return Proxy.Name_()
}
func (Proxy Type_reflect) NumField() int {
	return Proxy.NumField_()
}
func (Proxy Type_reflect) NumIn() int {
	return Proxy.NumIn_()
}
func (Proxy Type_reflect) NumMethod() int {
	return Proxy.NumMethod_()
}
func (Proxy Type_reflect) NumOut() int {
	return Proxy.NumOut_()
}
func (Proxy Type_reflect) Out(i int) reflect.Type {
	return Proxy.Out_(i)
}
func (Proxy Type_reflect) PkgPath() string {
	return Proxy.PkgPath_()
}
func (Proxy Type_reflect) Size() uintptr {
	return Proxy.Size_()
}
func (Proxy Type_reflect) String() string {
	return Proxy.String_()
}
