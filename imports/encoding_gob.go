// this file was generated by gomacro command: import _b "encoding/gob"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"encoding/gob"
)

// reflection: allow interpreted code to import "encoding/gob"
func init() {
	Packages["encoding/gob"] = Package{
	Binds: map[string]Value{
		"NewDecoder":	ValueOf(gob.NewDecoder),
		"NewEncoder":	ValueOf(gob.NewEncoder),
		"Register":	ValueOf(gob.Register),
		"RegisterName":	ValueOf(gob.RegisterName),
	},
	Types: map[string]Type{
		"CommonType":	TypeOf((*gob.CommonType)(nil)).Elem(),
		"Decoder":	TypeOf((*gob.Decoder)(nil)).Elem(),
		"Encoder":	TypeOf((*gob.Encoder)(nil)).Elem(),
		"GobDecoder":	TypeOf((*gob.GobDecoder)(nil)).Elem(),
		"GobEncoder":	TypeOf((*gob.GobEncoder)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"GobDecoder":	TypeOf((*GobDecoder_encoding_gob)(nil)).Elem(),
		"GobEncoder":	TypeOf((*GobEncoder_encoding_gob)(nil)).Elem(),
	},
	Untypeds: map[string]string{
	},
	Wrappers: map[string][]string{
	} }
}

// --------------- proxy for encoding/gob.GobDecoder ---------------
type GobDecoder_encoding_gob struct {
	Object	interface{}
	GobDecode_	func([]byte) error
}
func (Proxy *GobDecoder_encoding_gob) GobDecode(unnamed0 []byte) error {
	return Proxy.GobDecode_(unnamed0)
}

// --------------- proxy for encoding/gob.GobEncoder ---------------
type GobEncoder_encoding_gob struct {
	Object	interface{}
	GobEncode_	func() ([]byte, error)
}
func (Proxy *GobEncoder_encoding_gob) GobEncode() ([]byte, error) {
	return Proxy.GobEncode_()
}
