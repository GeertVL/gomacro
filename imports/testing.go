// this file was generated by gomacro command: import "testing"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"testing"
)

func init() {
	Packages["testing"] = Package{
	Binds: map[string]Value{
		"AllocsPerRun":	ValueOf(testing.AllocsPerRun),
		"Benchmark":	ValueOf(testing.Benchmark),
		"CoverMode":	ValueOf(testing.CoverMode),
		"Coverage":	ValueOf(testing.Coverage),
		"Main":	ValueOf(testing.Main),
		"MainStart":	ValueOf(testing.MainStart),
		"RegisterCover":	ValueOf(testing.RegisterCover),
		"RunBenchmarks":	ValueOf(testing.RunBenchmarks),
		"RunExamples":	ValueOf(testing.RunExamples),
		"RunTests":	ValueOf(testing.RunTests),
		"Short":	ValueOf(testing.Short),
		"Verbose":	ValueOf(testing.Verbose),
	},
	Types: map[string]Type{
		"B":	TypeOf((*testing.B)(nil)).Elem(),
		"BenchmarkResult":	TypeOf((*testing.BenchmarkResult)(nil)).Elem(),
		"Cover":	TypeOf((*testing.Cover)(nil)).Elem(),
		"CoverBlock":	TypeOf((*testing.CoverBlock)(nil)).Elem(),
		"InternalBenchmark":	TypeOf((*testing.InternalBenchmark)(nil)).Elem(),
		"InternalExample":	TypeOf((*testing.InternalExample)(nil)).Elem(),
		"InternalTest":	TypeOf((*testing.InternalTest)(nil)).Elem(),
		"M":	TypeOf((*testing.M)(nil)).Elem(),
		"PB":	TypeOf((*testing.PB)(nil)).Elem(),
		"T":	TypeOf((*testing.T)(nil)).Elem(),
		"TB":	TypeOf((*testing.TB)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"TB":	TypeOf((*TB_testing)(nil)).Elem(),
	} }
}

// --------------- proxy for testing.TB ---------------
type TB_testing struct {
	Object	interface{}
	Error_	func(args []interface{}) 
	Errorf_	func(format string, args []interface{}) 
	Fail_	func() 
	FailNow_	func() 
	Failed_	func() bool
	Fatal_	func(args []interface{}) 
	Fatalf_	func(format string, args []interface{}) 
	Log_	func(args []interface{}) 
	Logf_	func(format string, args []interface{}) 
	Name_	func() string
	Skip_	func(args []interface{}) 
	SkipNow_	func() 
	Skipf_	func(format string, args []interface{}) 
	Skipped_	func() bool
}
func (Proxy TB_testing) Error(args []interface{})  {
	Proxy.Error_(args)
}
func (Proxy TB_testing) Errorf(format string, args []interface{})  {
	Proxy.Errorf_(format, args)
}
func (Proxy TB_testing) Fail()  {
	Proxy.Fail_()
}
func (Proxy TB_testing) FailNow()  {
	Proxy.FailNow_()
}
func (Proxy TB_testing) Failed() bool {
	return Proxy.Failed_()
}
func (Proxy TB_testing) Fatal(args []interface{})  {
	Proxy.Fatal_(args)
}
func (Proxy TB_testing) Fatalf(format string, args []interface{})  {
	Proxy.Fatalf_(format, args)
}
func (Proxy TB_testing) Log(args []interface{})  {
	Proxy.Log_(args)
}
func (Proxy TB_testing) Logf(format string, args []interface{})  {
	Proxy.Logf_(format, args)
}
func (Proxy TB_testing) Name() string {
	return Proxy.Name_()
}
func (Proxy TB_testing) Skip(args []interface{})  {
	Proxy.Skip_(args)
}
func (Proxy TB_testing) SkipNow()  {
	Proxy.SkipNow_()
}
func (Proxy TB_testing) Skipf(format string, args []interface{})  {
	Proxy.Skipf_(format, args)
}
func (Proxy TB_testing) Skipped() bool {
	return Proxy.Skipped_()
}
