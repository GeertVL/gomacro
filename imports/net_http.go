// this file was generated by gomacro command: import "net/http"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"bufio"
	"net"
	"net/http"
	"net/url"
	"os"
)

func init() {
	Packages["net/http"] = Package{
	Binds: map[string]Value{
		"CanonicalHeaderKey":	ValueOf(http.CanonicalHeaderKey),
		"DefaultClient":	ValueOf(&http.DefaultClient).Elem(),
		"DefaultMaxHeaderBytes":	ValueOf(http.DefaultMaxHeaderBytes),
		"DefaultMaxIdleConnsPerHost":	ValueOf(http.DefaultMaxIdleConnsPerHost),
		"DefaultServeMux":	ValueOf(&http.DefaultServeMux).Elem(),
		"DefaultTransport":	ValueOf(&http.DefaultTransport).Elem(),
		"DetectContentType":	ValueOf(http.DetectContentType),
		"ErrAbortHandler":	ValueOf(&http.ErrAbortHandler).Elem(),
		"ErrBodyNotAllowed":	ValueOf(&http.ErrBodyNotAllowed).Elem(),
		"ErrBodyReadAfterClose":	ValueOf(&http.ErrBodyReadAfterClose).Elem(),
		"ErrContentLength":	ValueOf(&http.ErrContentLength).Elem(),
		"ErrHandlerTimeout":	ValueOf(&http.ErrHandlerTimeout).Elem(),
		"ErrHeaderTooLong":	ValueOf(&http.ErrHeaderTooLong).Elem(),
		"ErrHijacked":	ValueOf(&http.ErrHijacked).Elem(),
		"ErrLineTooLong":	ValueOf(&http.ErrLineTooLong).Elem(),
		"ErrMissingBoundary":	ValueOf(&http.ErrMissingBoundary).Elem(),
		"ErrMissingContentLength":	ValueOf(&http.ErrMissingContentLength).Elem(),
		"ErrMissingFile":	ValueOf(&http.ErrMissingFile).Elem(),
		"ErrNoCookie":	ValueOf(&http.ErrNoCookie).Elem(),
		"ErrNoLocation":	ValueOf(&http.ErrNoLocation).Elem(),
		"ErrNotMultipart":	ValueOf(&http.ErrNotMultipart).Elem(),
		"ErrNotSupported":	ValueOf(&http.ErrNotSupported).Elem(),
		"ErrServerClosed":	ValueOf(&http.ErrServerClosed).Elem(),
		"ErrShortBody":	ValueOf(&http.ErrShortBody).Elem(),
		"ErrSkipAltProtocol":	ValueOf(&http.ErrSkipAltProtocol).Elem(),
		"ErrUnexpectedTrailer":	ValueOf(&http.ErrUnexpectedTrailer).Elem(),
		"ErrUseLastResponse":	ValueOf(&http.ErrUseLastResponse).Elem(),
		"ErrWriteAfterFlush":	ValueOf(&http.ErrWriteAfterFlush).Elem(),
		"Error":	ValueOf(http.Error),
		"FileServer":	ValueOf(http.FileServer),
		"Get":	ValueOf(http.Get),
		"Handle":	ValueOf(http.Handle),
		"HandleFunc":	ValueOf(http.HandleFunc),
		"Head":	ValueOf(http.Head),
		"ListenAndServe":	ValueOf(http.ListenAndServe),
		"ListenAndServeTLS":	ValueOf(http.ListenAndServeTLS),
		"LocalAddrContextKey":	ValueOf(&http.LocalAddrContextKey).Elem(),
		"MaxBytesReader":	ValueOf(http.MaxBytesReader),
		"MethodConnect":	ValueOf(http.MethodConnect),
		"MethodDelete":	ValueOf(http.MethodDelete),
		"MethodGet":	ValueOf(http.MethodGet),
		"MethodHead":	ValueOf(http.MethodHead),
		"MethodOptions":	ValueOf(http.MethodOptions),
		"MethodPatch":	ValueOf(http.MethodPatch),
		"MethodPost":	ValueOf(http.MethodPost),
		"MethodPut":	ValueOf(http.MethodPut),
		"MethodTrace":	ValueOf(http.MethodTrace),
		"NewFileTransport":	ValueOf(http.NewFileTransport),
		"NewRequest":	ValueOf(http.NewRequest),
		"NewServeMux":	ValueOf(http.NewServeMux),
		"NoBody":	ValueOf(&http.NoBody).Elem(),
		"NotFound":	ValueOf(http.NotFound),
		"NotFoundHandler":	ValueOf(http.NotFoundHandler),
		"ParseHTTPVersion":	ValueOf(http.ParseHTTPVersion),
		"ParseTime":	ValueOf(http.ParseTime),
		"Post":	ValueOf(http.Post),
		"PostForm":	ValueOf(http.PostForm),
		"ProxyFromEnvironment":	ValueOf(http.ProxyFromEnvironment),
		"ProxyURL":	ValueOf(http.ProxyURL),
		"ReadRequest":	ValueOf(http.ReadRequest),
		"ReadResponse":	ValueOf(http.ReadResponse),
		"Redirect":	ValueOf(http.Redirect),
		"RedirectHandler":	ValueOf(http.RedirectHandler),
		"Serve":	ValueOf(http.Serve),
		"ServeContent":	ValueOf(http.ServeContent),
		"ServeFile":	ValueOf(http.ServeFile),
		"ServerContextKey":	ValueOf(&http.ServerContextKey).Elem(),
		"SetCookie":	ValueOf(http.SetCookie),
		"StateActive":	ValueOf(http.StateActive),
		"StateClosed":	ValueOf(http.StateClosed),
		"StateHijacked":	ValueOf(http.StateHijacked),
		"StateIdle":	ValueOf(http.StateIdle),
		"StateNew":	ValueOf(http.StateNew),
		"StatusAccepted":	ValueOf(http.StatusAccepted),
		"StatusAlreadyReported":	ValueOf(http.StatusAlreadyReported),
		"StatusBadGateway":	ValueOf(http.StatusBadGateway),
		"StatusBadRequest":	ValueOf(http.StatusBadRequest),
		"StatusConflict":	ValueOf(http.StatusConflict),
		"StatusContinue":	ValueOf(http.StatusContinue),
		"StatusCreated":	ValueOf(http.StatusCreated),
		"StatusExpectationFailed":	ValueOf(http.StatusExpectationFailed),
		"StatusFailedDependency":	ValueOf(http.StatusFailedDependency),
		"StatusForbidden":	ValueOf(http.StatusForbidden),
		"StatusFound":	ValueOf(http.StatusFound),
		"StatusGatewayTimeout":	ValueOf(http.StatusGatewayTimeout),
		"StatusGone":	ValueOf(http.StatusGone),
		"StatusHTTPVersionNotSupported":	ValueOf(http.StatusHTTPVersionNotSupported),
		"StatusIMUsed":	ValueOf(http.StatusIMUsed),
		"StatusInsufficientStorage":	ValueOf(http.StatusInsufficientStorage),
		"StatusInternalServerError":	ValueOf(http.StatusInternalServerError),
		"StatusLengthRequired":	ValueOf(http.StatusLengthRequired),
		"StatusLocked":	ValueOf(http.StatusLocked),
		"StatusLoopDetected":	ValueOf(http.StatusLoopDetected),
		"StatusMethodNotAllowed":	ValueOf(http.StatusMethodNotAllowed),
		"StatusMovedPermanently":	ValueOf(http.StatusMovedPermanently),
		"StatusMultiStatus":	ValueOf(http.StatusMultiStatus),
		"StatusMultipleChoices":	ValueOf(http.StatusMultipleChoices),
		"StatusNetworkAuthenticationRequired":	ValueOf(http.StatusNetworkAuthenticationRequired),
		"StatusNoContent":	ValueOf(http.StatusNoContent),
		"StatusNonAuthoritativeInfo":	ValueOf(http.StatusNonAuthoritativeInfo),
		"StatusNotAcceptable":	ValueOf(http.StatusNotAcceptable),
		"StatusNotExtended":	ValueOf(http.StatusNotExtended),
		"StatusNotFound":	ValueOf(http.StatusNotFound),
		"StatusNotImplemented":	ValueOf(http.StatusNotImplemented),
		"StatusNotModified":	ValueOf(http.StatusNotModified),
		"StatusOK":	ValueOf(http.StatusOK),
		"StatusPartialContent":	ValueOf(http.StatusPartialContent),
		"StatusPaymentRequired":	ValueOf(http.StatusPaymentRequired),
		"StatusPermanentRedirect":	ValueOf(http.StatusPermanentRedirect),
		"StatusPreconditionFailed":	ValueOf(http.StatusPreconditionFailed),
		"StatusPreconditionRequired":	ValueOf(http.StatusPreconditionRequired),
		"StatusProcessing":	ValueOf(http.StatusProcessing),
		"StatusProxyAuthRequired":	ValueOf(http.StatusProxyAuthRequired),
		"StatusRequestEntityTooLarge":	ValueOf(http.StatusRequestEntityTooLarge),
		"StatusRequestHeaderFieldsTooLarge":	ValueOf(http.StatusRequestHeaderFieldsTooLarge),
		"StatusRequestTimeout":	ValueOf(http.StatusRequestTimeout),
		"StatusRequestURITooLong":	ValueOf(http.StatusRequestURITooLong),
		"StatusRequestedRangeNotSatisfiable":	ValueOf(http.StatusRequestedRangeNotSatisfiable),
		"StatusResetContent":	ValueOf(http.StatusResetContent),
		"StatusSeeOther":	ValueOf(http.StatusSeeOther),
		"StatusServiceUnavailable":	ValueOf(http.StatusServiceUnavailable),
		"StatusSwitchingProtocols":	ValueOf(http.StatusSwitchingProtocols),
		"StatusTeapot":	ValueOf(http.StatusTeapot),
		"StatusTemporaryRedirect":	ValueOf(http.StatusTemporaryRedirect),
		"StatusText":	ValueOf(http.StatusText),
		"StatusTooManyRequests":	ValueOf(http.StatusTooManyRequests),
		"StatusUnauthorized":	ValueOf(http.StatusUnauthorized),
		"StatusUnavailableForLegalReasons":	ValueOf(http.StatusUnavailableForLegalReasons),
		"StatusUnprocessableEntity":	ValueOf(http.StatusUnprocessableEntity),
		"StatusUnsupportedMediaType":	ValueOf(http.StatusUnsupportedMediaType),
		"StatusUpgradeRequired":	ValueOf(http.StatusUpgradeRequired),
		"StatusUseProxy":	ValueOf(http.StatusUseProxy),
		"StatusVariantAlsoNegotiates":	ValueOf(http.StatusVariantAlsoNegotiates),
		"StripPrefix":	ValueOf(http.StripPrefix),
		"TimeFormat":	ValueOf(http.TimeFormat),
		"TimeoutHandler":	ValueOf(http.TimeoutHandler),
		"TrailerPrefix":	ValueOf(http.TrailerPrefix),
	},
	Types: map[string]Type{
		"Client":	TypeOf((*http.Client)(nil)).Elem(),
		"CloseNotifier":	TypeOf((*http.CloseNotifier)(nil)).Elem(),
		"ConnState":	TypeOf((*http.ConnState)(nil)).Elem(),
		"Cookie":	TypeOf((*http.Cookie)(nil)).Elem(),
		"CookieJar":	TypeOf((*http.CookieJar)(nil)).Elem(),
		"Dir":	TypeOf((*http.Dir)(nil)).Elem(),
		"File":	TypeOf((*http.File)(nil)).Elem(),
		"FileSystem":	TypeOf((*http.FileSystem)(nil)).Elem(),
		"Flusher":	TypeOf((*http.Flusher)(nil)).Elem(),
		"Handler":	TypeOf((*http.Handler)(nil)).Elem(),
		"HandlerFunc":	TypeOf((*http.HandlerFunc)(nil)).Elem(),
		"Header":	TypeOf((*http.Header)(nil)).Elem(),
		"Hijacker":	TypeOf((*http.Hijacker)(nil)).Elem(),
		"ProtocolError":	TypeOf((*http.ProtocolError)(nil)).Elem(),
		"PushOptions":	TypeOf((*http.PushOptions)(nil)).Elem(),
		"Pusher":	TypeOf((*http.Pusher)(nil)).Elem(),
		"Request":	TypeOf((*http.Request)(nil)).Elem(),
		"Response":	TypeOf((*http.Response)(nil)).Elem(),
		"ResponseWriter":	TypeOf((*http.ResponseWriter)(nil)).Elem(),
		"RoundTripper":	TypeOf((*http.RoundTripper)(nil)).Elem(),
		"ServeMux":	TypeOf((*http.ServeMux)(nil)).Elem(),
		"Server":	TypeOf((*http.Server)(nil)).Elem(),
		"Transport":	TypeOf((*http.Transport)(nil)).Elem(),
	},
	Proxies: map[string]Type{
		"CloseNotifier":	TypeOf((*CloseNotifier_net_http)(nil)).Elem(),
		"CookieJar":	TypeOf((*CookieJar_net_http)(nil)).Elem(),
		"File":	TypeOf((*File_net_http)(nil)).Elem(),
		"FileSystem":	TypeOf((*FileSystem_net_http)(nil)).Elem(),
		"Flusher":	TypeOf((*Flusher_net_http)(nil)).Elem(),
		"Handler":	TypeOf((*Handler_net_http)(nil)).Elem(),
		"Hijacker":	TypeOf((*Hijacker_net_http)(nil)).Elem(),
		"Pusher":	TypeOf((*Pusher_net_http)(nil)).Elem(),
		"ResponseWriter":	TypeOf((*ResponseWriter_net_http)(nil)).Elem(),
		"RoundTripper":	TypeOf((*RoundTripper_net_http)(nil)).Elem(),
	} }
}

// --------------- proxy for net/http.CloseNotifier ---------------
type CloseNotifier_net_http struct {
	CloseNotify_	func() <-chan bool
}
func (Obj CloseNotifier_net_http) CloseNotify() <-chan bool {
	return Obj.CloseNotify_()
}

// --------------- proxy for net/http.CookieJar ---------------
type CookieJar_net_http struct {
	Cookies_	func(u *url.URL) []*http.Cookie
	SetCookies_	func(u *url.URL, cookies []*http.Cookie) 
}
func (Obj CookieJar_net_http) Cookies(u *url.URL) []*http.Cookie {
	return Obj.Cookies_(u)
}
func (Obj CookieJar_net_http) SetCookies(u *url.URL, cookies []*http.Cookie)  {
	Obj.SetCookies_(u, cookies)
}

// --------------- proxy for net/http.File ---------------
type File_net_http struct {
	Close_	func() error
	Read_	func(p []byte) (n int, err error)
	Readdir_	func(count int) ([]os.FileInfo, error)
	Seek_	func(offset int64, whence int) (int64, error)
	Stat_	func() (os.FileInfo, error)
}
func (Obj File_net_http) Close() error {
	return Obj.Close_()
}
func (Obj File_net_http) Read(p []byte) (n int, err error) {
	return Obj.Read_(p)
}
func (Obj File_net_http) Readdir(count int) ([]os.FileInfo, error) {
	return Obj.Readdir_(count)
}
func (Obj File_net_http) Seek(offset int64, whence int) (int64, error) {
	return Obj.Seek_(offset, whence)
}
func (Obj File_net_http) Stat() (os.FileInfo, error) {
	return Obj.Stat_()
}

// --------------- proxy for net/http.FileSystem ---------------
type FileSystem_net_http struct {
	Open_	func(name string) (http.File, error)
}
func (Obj FileSystem_net_http) Open(name string) (http.File, error) {
	return Obj.Open_(name)
}

// --------------- proxy for net/http.Flusher ---------------
type Flusher_net_http struct {
	Flush_	func() 
}
func (Obj Flusher_net_http) Flush()  {
	Obj.Flush_()
}

// --------------- proxy for net/http.Handler ---------------
type Handler_net_http struct {
	ServeHTTP_	func(http.ResponseWriter, *http.Request) 
}
func (Obj Handler_net_http) ServeHTTP(unnamed0 http.ResponseWriter, unnamed1 *http.Request)  {
	Obj.ServeHTTP_(unnamed0, unnamed1)
}

// --------------- proxy for net/http.Hijacker ---------------
type Hijacker_net_http struct {
	Hijack_	func() (net.Conn, *bufio.ReadWriter, error)
}
func (Obj Hijacker_net_http) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	return Obj.Hijack_()
}

// --------------- proxy for net/http.Pusher ---------------
type Pusher_net_http struct {
	Push_	func(target string, opts *http.PushOptions) error
}
func (Obj Pusher_net_http) Push(target string, opts *http.PushOptions) error {
	return Obj.Push_(target, opts)
}

// --------------- proxy for net/http.ResponseWriter ---------------
type ResponseWriter_net_http struct {
	Header_	func() http.Header
	Write_	func([]byte) (int, error)
	WriteHeader_	func(int) 
}
func (Obj ResponseWriter_net_http) Header() http.Header {
	return Obj.Header_()
}
func (Obj ResponseWriter_net_http) Write(unnamed0 []byte) (int, error) {
	return Obj.Write_(unnamed0)
}
func (Obj ResponseWriter_net_http) WriteHeader(unnamed0 int)  {
	Obj.WriteHeader_(unnamed0)
}

// --------------- proxy for net/http.RoundTripper ---------------
type RoundTripper_net_http struct {
	RoundTrip_	func(*http.Request) (*http.Response, error)
}
func (Obj RoundTripper_net_http) RoundTrip(unnamed0 *http.Request) (*http.Response, error) {
	return Obj.RoundTrip_(unnamed0)
}
