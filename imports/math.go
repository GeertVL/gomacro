// this file was generated by gomacro command: import "math"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg "math"
	. "reflect"
)

func init() {
	Binds["math"] = map[string]Value{
		"Abs":	ValueOf(pkg.Abs),
		"Acos":	ValueOf(pkg.Acos),
		"Acosh":	ValueOf(pkg.Acosh),
		"Asin":	ValueOf(pkg.Asin),
		"Asinh":	ValueOf(pkg.Asinh),
		"Atan":	ValueOf(pkg.Atan),
		"Atan2":	ValueOf(pkg.Atan2),
		"Atanh":	ValueOf(pkg.Atanh),
		"Cbrt":	ValueOf(pkg.Cbrt),
		"Ceil":	ValueOf(pkg.Ceil),
		"Copysign":	ValueOf(pkg.Copysign),
		"Cos":	ValueOf(pkg.Cos),
		"Cosh":	ValueOf(pkg.Cosh),
		"Dim":	ValueOf(pkg.Dim),
		"E":	ValueOf(pkg.E),
		"Erf":	ValueOf(pkg.Erf),
		"Erfc":	ValueOf(pkg.Erfc),
		"Exp":	ValueOf(pkg.Exp),
		"Exp2":	ValueOf(pkg.Exp2),
		"Expm1":	ValueOf(pkg.Expm1),
		"Float32bits":	ValueOf(pkg.Float32bits),
		"Float32frombits":	ValueOf(pkg.Float32frombits),
		"Float64bits":	ValueOf(pkg.Float64bits),
		"Float64frombits":	ValueOf(pkg.Float64frombits),
		"Floor":	ValueOf(pkg.Floor),
		"Frexp":	ValueOf(pkg.Frexp),
		"Gamma":	ValueOf(pkg.Gamma),
		"Hypot":	ValueOf(pkg.Hypot),
		"Ilogb":	ValueOf(pkg.Ilogb),
		"Inf":	ValueOf(pkg.Inf),
		"IsInf":	ValueOf(pkg.IsInf),
		"IsNaN":	ValueOf(pkg.IsNaN),
		"J0":	ValueOf(pkg.J0),
		"J1":	ValueOf(pkg.J1),
		"Jn":	ValueOf(pkg.Jn),
		"Ldexp":	ValueOf(pkg.Ldexp),
		"Lgamma":	ValueOf(pkg.Lgamma),
		"Ln10":	ValueOf(pkg.Ln10),
		"Ln2":	ValueOf(pkg.Ln2),
		"Log":	ValueOf(pkg.Log),
		"Log10":	ValueOf(pkg.Log10),
		"Log10E":	ValueOf(pkg.Log10E),
		"Log1p":	ValueOf(pkg.Log1p),
		"Log2":	ValueOf(pkg.Log2),
		"Log2E":	ValueOf(pkg.Log2E),
		"Logb":	ValueOf(pkg.Logb),
		"Max":	ValueOf(pkg.Max),
		"MaxFloat32":	ValueOf(pkg.MaxFloat32),
		"MaxFloat64":	ValueOf(pkg.MaxFloat64),
		"MaxInt16":	ValueOf(pkg.MaxInt16),
		"MaxInt32":	ValueOf(pkg.MaxInt32),
		"MaxInt64":	ValueOf(pkg.MaxInt64),
		"MaxInt8":	ValueOf(pkg.MaxInt8),
		"MaxUint16":	ValueOf(pkg.MaxUint16),
		"MaxUint32":	ValueOf(pkg.MaxUint32),
		"MaxUint64":	ValueOf(uint64(pkg.MaxUint64)),
		"MaxUint8":	ValueOf(pkg.MaxUint8),
		"Min":	ValueOf(pkg.Min),
		"MinInt16":	ValueOf(pkg.MinInt16),
		"MinInt32":	ValueOf(pkg.MinInt32),
		"MinInt64":	ValueOf(pkg.MinInt64),
		"MinInt8":	ValueOf(pkg.MinInt8),
		"Mod":	ValueOf(pkg.Mod),
		"Modf":	ValueOf(pkg.Modf),
		"NaN":	ValueOf(pkg.NaN),
		"Nextafter":	ValueOf(pkg.Nextafter),
		"Nextafter32":	ValueOf(pkg.Nextafter32),
		"Phi":	ValueOf(pkg.Phi),
		"Pi":	ValueOf(pkg.Pi),
		"Pow":	ValueOf(pkg.Pow),
		"Pow10":	ValueOf(pkg.Pow10),
		"Remainder":	ValueOf(pkg.Remainder),
		"Signbit":	ValueOf(pkg.Signbit),
		"Sin":	ValueOf(pkg.Sin),
		"Sincos":	ValueOf(pkg.Sincos),
		"Sinh":	ValueOf(pkg.Sinh),
		"SmallestNonzeroFloat32":	ValueOf(pkg.SmallestNonzeroFloat32),
		"SmallestNonzeroFloat64":	ValueOf(pkg.SmallestNonzeroFloat64),
		"Sqrt":	ValueOf(pkg.Sqrt),
		"Sqrt2":	ValueOf(pkg.Sqrt2),
		"SqrtE":	ValueOf(pkg.SqrtE),
		"SqrtPhi":	ValueOf(pkg.SqrtPhi),
		"SqrtPi":	ValueOf(pkg.SqrtPi),
		"Tan":	ValueOf(pkg.Tan),
		"Tanh":	ValueOf(pkg.Tanh),
		"Trunc":	ValueOf(pkg.Trunc),
		"Y0":	ValueOf(pkg.Y0),
		"Y1":	ValueOf(pkg.Y1),
		"Yn":	ValueOf(pkg.Yn),
	}
	Types["math"] = map[string]Type{
	}
}
