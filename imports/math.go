// this file was generated by gomacro command: import "math"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"math"
)

func init() {
	Binds["math"] = map[string]Value{
		"Abs":	ValueOf(math.Abs),
		"Acos":	ValueOf(math.Acos),
		"Acosh":	ValueOf(math.Acosh),
		"Asin":	ValueOf(math.Asin),
		"Asinh":	ValueOf(math.Asinh),
		"Atan":	ValueOf(math.Atan),
		"Atan2":	ValueOf(math.Atan2),
		"Atanh":	ValueOf(math.Atanh),
		"Cbrt":	ValueOf(math.Cbrt),
		"Ceil":	ValueOf(math.Ceil),
		"Copysign":	ValueOf(math.Copysign),
		"Cos":	ValueOf(math.Cos),
		"Cosh":	ValueOf(math.Cosh),
		"Dim":	ValueOf(math.Dim),
		"E":	ValueOf(math.E),
		"Erf":	ValueOf(math.Erf),
		"Erfc":	ValueOf(math.Erfc),
		"Exp":	ValueOf(math.Exp),
		"Exp2":	ValueOf(math.Exp2),
		"Expm1":	ValueOf(math.Expm1),
		"Float32bits":	ValueOf(math.Float32bits),
		"Float32frombits":	ValueOf(math.Float32frombits),
		"Float64bits":	ValueOf(math.Float64bits),
		"Float64frombits":	ValueOf(math.Float64frombits),
		"Floor":	ValueOf(math.Floor),
		"Frexp":	ValueOf(math.Frexp),
		"Gamma":	ValueOf(math.Gamma),
		"Hypot":	ValueOf(math.Hypot),
		"Ilogb":	ValueOf(math.Ilogb),
		"Inf":	ValueOf(math.Inf),
		"IsInf":	ValueOf(math.IsInf),
		"IsNaN":	ValueOf(math.IsNaN),
		"J0":	ValueOf(math.J0),
		"J1":	ValueOf(math.J1),
		"Jn":	ValueOf(math.Jn),
		"Ldexp":	ValueOf(math.Ldexp),
		"Lgamma":	ValueOf(math.Lgamma),
		"Ln10":	ValueOf(math.Ln10),
		"Ln2":	ValueOf(math.Ln2),
		"Log":	ValueOf(math.Log),
		"Log10":	ValueOf(math.Log10),
		"Log10E":	ValueOf(math.Log10E),
		"Log1p":	ValueOf(math.Log1p),
		"Log2":	ValueOf(math.Log2),
		"Log2E":	ValueOf(math.Log2E),
		"Logb":	ValueOf(math.Logb),
		"Max":	ValueOf(math.Max),
		"MaxFloat32":	ValueOf(math.MaxFloat32),
		"MaxFloat64":	ValueOf(math.MaxFloat64),
		"MaxInt16":	ValueOf(math.MaxInt16),
		"MaxInt32":	ValueOf(math.MaxInt32),
		"MaxInt64":	ValueOf(math.MaxInt64),
		"MaxInt8":	ValueOf(math.MaxInt8),
		"MaxUint16":	ValueOf(math.MaxUint16),
		"MaxUint32":	ValueOf(math.MaxUint32),
		"MaxUint64":	ValueOf(uint64(math.MaxUint64)),
		"MaxUint8":	ValueOf(math.MaxUint8),
		"Min":	ValueOf(math.Min),
		"MinInt16":	ValueOf(math.MinInt16),
		"MinInt32":	ValueOf(math.MinInt32),
		"MinInt64":	ValueOf(math.MinInt64),
		"MinInt8":	ValueOf(math.MinInt8),
		"Mod":	ValueOf(math.Mod),
		"Modf":	ValueOf(math.Modf),
		"NaN":	ValueOf(math.NaN),
		"Nextafter":	ValueOf(math.Nextafter),
		"Nextafter32":	ValueOf(math.Nextafter32),
		"Phi":	ValueOf(math.Phi),
		"Pi":	ValueOf(math.Pi),
		"Pow":	ValueOf(math.Pow),
		"Pow10":	ValueOf(math.Pow10),
		"Remainder":	ValueOf(math.Remainder),
		"Signbit":	ValueOf(math.Signbit),
		"Sin":	ValueOf(math.Sin),
		"Sincos":	ValueOf(math.Sincos),
		"Sinh":	ValueOf(math.Sinh),
		"SmallestNonzeroFloat32":	ValueOf(math.SmallestNonzeroFloat32),
		"SmallestNonzeroFloat64":	ValueOf(math.SmallestNonzeroFloat64),
		"Sqrt":	ValueOf(math.Sqrt),
		"Sqrt2":	ValueOf(math.Sqrt2),
		"SqrtE":	ValueOf(math.SqrtE),
		"SqrtPhi":	ValueOf(math.SqrtPhi),
		"SqrtPi":	ValueOf(math.SqrtPi),
		"Tan":	ValueOf(math.Tan),
		"Tanh":	ValueOf(math.Tanh),
		"Trunc":	ValueOf(math.Trunc),
		"Y0":	ValueOf(math.Y0),
		"Y1":	ValueOf(math.Y1),
		"Yn":	ValueOf(math.Yn),
	}
	Types["math"] = map[string]Type{
	}
	Proxies["math"] = map[string]Type{
	}
}
