// this file was generated by gomacro command: import "sync"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	. "reflect"
	"sync"
)

func init() {
	Binds["sync"] = map[string]Value{
		"NewCond":	ValueOf(sync.NewCond),
	}
	Types["sync"] = map[string]Type{
		"Cond":	TypeOf((*sync.Cond)(nil)).Elem(),
		"Locker":	TypeOf((*sync.Locker)(nil)).Elem(),
		"Mutex":	TypeOf((*sync.Mutex)(nil)).Elem(),
		"Once":	TypeOf((*sync.Once)(nil)).Elem(),
		"Pool":	TypeOf((*sync.Pool)(nil)).Elem(),
		"RWMutex":	TypeOf((*sync.RWMutex)(nil)).Elem(),
		"WaitGroup":	TypeOf((*sync.WaitGroup)(nil)).Elem(),
	}
	Proxies["sync"] = map[string]Type{
		"Locker":	TypeOf((*Locker_sync)(nil)).Elem(),
	}
}

// --------------- proxy for sync.Locker ---------------
type Locker_sync struct {
	Lock_	func() 
	Unlock_	func() 
}
func (Obj Locker_sync) Lock()  {
	Obj.Lock_()
}
func (Obj Locker_sync) Unlock()  {
	Obj.Unlock_()
}
