// this file was generated by gomacro command: import "regexp/syntax"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg "regexp/syntax"
	. "reflect"
)

func init() {
	Binds["regexp/syntax"] = map[string]Value{
		"ClassNL":	ValueOf(pkg.ClassNL),
		"Compile":	ValueOf(pkg.Compile),
		"DotNL":	ValueOf(pkg.DotNL),
		"EmptyBeginLine":	ValueOf(pkg.EmptyBeginLine),
		"EmptyBeginText":	ValueOf(pkg.EmptyBeginText),
		"EmptyEndLine":	ValueOf(pkg.EmptyEndLine),
		"EmptyEndText":	ValueOf(pkg.EmptyEndText),
		"EmptyNoWordBoundary":	ValueOf(pkg.EmptyNoWordBoundary),
		"EmptyOpContext":	ValueOf(pkg.EmptyOpContext),
		"EmptyWordBoundary":	ValueOf(pkg.EmptyWordBoundary),
		"ErrInternalError":	ValueOf(pkg.ErrInternalError),
		"ErrInvalidCharClass":	ValueOf(pkg.ErrInvalidCharClass),
		"ErrInvalidCharRange":	ValueOf(pkg.ErrInvalidCharRange),
		"ErrInvalidEscape":	ValueOf(pkg.ErrInvalidEscape),
		"ErrInvalidNamedCapture":	ValueOf(pkg.ErrInvalidNamedCapture),
		"ErrInvalidPerlOp":	ValueOf(pkg.ErrInvalidPerlOp),
		"ErrInvalidRepeatOp":	ValueOf(pkg.ErrInvalidRepeatOp),
		"ErrInvalidRepeatSize":	ValueOf(pkg.ErrInvalidRepeatSize),
		"ErrInvalidUTF8":	ValueOf(pkg.ErrInvalidUTF8),
		"ErrMissingBracket":	ValueOf(pkg.ErrMissingBracket),
		"ErrMissingParen":	ValueOf(pkg.ErrMissingParen),
		"ErrMissingRepeatArgument":	ValueOf(pkg.ErrMissingRepeatArgument),
		"ErrTrailingBackslash":	ValueOf(pkg.ErrTrailingBackslash),
		"ErrUnexpectedParen":	ValueOf(pkg.ErrUnexpectedParen),
		"FoldCase":	ValueOf(pkg.FoldCase),
		"InstAlt":	ValueOf(pkg.InstAlt),
		"InstAltMatch":	ValueOf(pkg.InstAltMatch),
		"InstCapture":	ValueOf(pkg.InstCapture),
		"InstEmptyWidth":	ValueOf(pkg.InstEmptyWidth),
		"InstFail":	ValueOf(pkg.InstFail),
		"InstMatch":	ValueOf(pkg.InstMatch),
		"InstNop":	ValueOf(pkg.InstNop),
		"InstRune":	ValueOf(pkg.InstRune),
		"InstRune1":	ValueOf(pkg.InstRune1),
		"InstRuneAny":	ValueOf(pkg.InstRuneAny),
		"InstRuneAnyNotNL":	ValueOf(pkg.InstRuneAnyNotNL),
		"IsWordChar":	ValueOf(pkg.IsWordChar),
		"Literal":	ValueOf(pkg.Literal),
		"MatchNL":	ValueOf(pkg.MatchNL),
		"NonGreedy":	ValueOf(pkg.NonGreedy),
		"OneLine":	ValueOf(pkg.OneLine),
		"OpAlternate":	ValueOf(pkg.OpAlternate),
		"OpAnyChar":	ValueOf(pkg.OpAnyChar),
		"OpAnyCharNotNL":	ValueOf(pkg.OpAnyCharNotNL),
		"OpBeginLine":	ValueOf(pkg.OpBeginLine),
		"OpBeginText":	ValueOf(pkg.OpBeginText),
		"OpCapture":	ValueOf(pkg.OpCapture),
		"OpCharClass":	ValueOf(pkg.OpCharClass),
		"OpConcat":	ValueOf(pkg.OpConcat),
		"OpEmptyMatch":	ValueOf(pkg.OpEmptyMatch),
		"OpEndLine":	ValueOf(pkg.OpEndLine),
		"OpEndText":	ValueOf(pkg.OpEndText),
		"OpLiteral":	ValueOf(pkg.OpLiteral),
		"OpNoMatch":	ValueOf(pkg.OpNoMatch),
		"OpNoWordBoundary":	ValueOf(pkg.OpNoWordBoundary),
		"OpPlus":	ValueOf(pkg.OpPlus),
		"OpQuest":	ValueOf(pkg.OpQuest),
		"OpRepeat":	ValueOf(pkg.OpRepeat),
		"OpStar":	ValueOf(pkg.OpStar),
		"OpWordBoundary":	ValueOf(pkg.OpWordBoundary),
		"POSIX":	ValueOf(pkg.POSIX),
		"Parse":	ValueOf(pkg.Parse),
		"Perl":	ValueOf(pkg.Perl),
		"PerlX":	ValueOf(pkg.PerlX),
		"Simple":	ValueOf(pkg.Simple),
		"UnicodeGroups":	ValueOf(pkg.UnicodeGroups),
		"WasDollar":	ValueOf(pkg.WasDollar),
	}
	Types["regexp/syntax"] = map[string]Type{
		"EmptyOp":	TypeOf((*pkg.EmptyOp)(nil)).Elem(),
		"Error":	TypeOf((*pkg.Error)(nil)).Elem(),
		"ErrorCode":	TypeOf((*pkg.ErrorCode)(nil)).Elem(),
		"Flags":	TypeOf((*pkg.Flags)(nil)).Elem(),
		"Inst":	TypeOf((*pkg.Inst)(nil)).Elem(),
		"InstOp":	TypeOf((*pkg.InstOp)(nil)).Elem(),
		"Op":	TypeOf((*pkg.Op)(nil)).Elem(),
		"Prog":	TypeOf((*pkg.Prog)(nil)).Elem(),
		"Regexp":	TypeOf((*pkg.Regexp)(nil)).Elem(),
	}
}
