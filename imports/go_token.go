// this file was generated by gomacro command: import "go/token"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package imports

import (
	pkg "go/token"
	. "reflect"
)

func Package_go_token() (map[string]Value, map[string]Type) {
	return map[string]Value{
			"ADD":            ValueOf(pkg.ADD),
			"ADD_ASSIGN":     ValueOf(pkg.ADD_ASSIGN),
			"AND":            ValueOf(pkg.AND),
			"AND_ASSIGN":     ValueOf(pkg.AND_ASSIGN),
			"AND_NOT":        ValueOf(pkg.AND_NOT),
			"AND_NOT_ASSIGN": ValueOf(pkg.AND_NOT_ASSIGN),
			"ARROW":          ValueOf(pkg.ARROW),
			"ASSIGN":         ValueOf(pkg.ASSIGN),
			"BREAK":          ValueOf(pkg.BREAK),
			"CASE":           ValueOf(pkg.CASE),
			"CHAN":           ValueOf(pkg.CHAN),
			"CHAR":           ValueOf(pkg.CHAR),
			"COLON":          ValueOf(pkg.COLON),
			"COMMA":          ValueOf(pkg.COMMA),
			"COMMENT":        ValueOf(pkg.COMMENT),
			"CONST":          ValueOf(pkg.CONST),
			"CONTINUE":       ValueOf(pkg.CONTINUE),
			"DEC":            ValueOf(pkg.DEC),
			"DEFAULT":        ValueOf(pkg.DEFAULT),
			"DEFER":          ValueOf(pkg.DEFER),
			"DEFINE":         ValueOf(pkg.DEFINE),
			"ELLIPSIS":       ValueOf(pkg.ELLIPSIS),
			"ELSE":           ValueOf(pkg.ELSE),
			"EOF":            ValueOf(pkg.EOF),
			"EQL":            ValueOf(pkg.EQL),
			"FALLTHROUGH":    ValueOf(pkg.FALLTHROUGH),
			"FLOAT":          ValueOf(pkg.FLOAT),
			"FOR":            ValueOf(pkg.FOR),
			"FUNC":           ValueOf(pkg.FUNC),
			"GEQ":            ValueOf(pkg.GEQ),
			"GO":             ValueOf(pkg.GO),
			"GOTO":           ValueOf(pkg.GOTO),
			"GTR":            ValueOf(pkg.GTR),
			"HighestPrec":    ValueOf(pkg.HighestPrec),
			"IDENT":          ValueOf(pkg.IDENT),
			"IF":             ValueOf(pkg.IF),
			"ILLEGAL":        ValueOf(pkg.ILLEGAL),
			"IMAG":           ValueOf(pkg.IMAG),
			"IMPORT":         ValueOf(pkg.IMPORT),
			"INC":            ValueOf(pkg.INC),
			"INT":            ValueOf(pkg.INT),
			"INTERFACE":      ValueOf(pkg.INTERFACE),
			"LAND":           ValueOf(pkg.LAND),
			"LBRACE":         ValueOf(pkg.LBRACE),
			"LBRACK":         ValueOf(pkg.LBRACK),
			"LEQ":            ValueOf(pkg.LEQ),
			"LOR":            ValueOf(pkg.LOR),
			"LPAREN":         ValueOf(pkg.LPAREN),
			"LSS":            ValueOf(pkg.LSS),
			"Lookup":         ValueOf(pkg.Lookup),
			"LowestPrec":     ValueOf(pkg.LowestPrec),
			"MAP":            ValueOf(pkg.MAP),
			"MUL":            ValueOf(pkg.MUL),
			"MUL_ASSIGN":     ValueOf(pkg.MUL_ASSIGN),
			"NEQ":            ValueOf(pkg.NEQ),
			"NOT":            ValueOf(pkg.NOT),
			"NewFileSet":     ValueOf(pkg.NewFileSet),
			"NoPos":          ValueOf(pkg.NoPos),
			"OR":             ValueOf(pkg.OR),
			"OR_ASSIGN":      ValueOf(pkg.OR_ASSIGN),
			"PACKAGE":        ValueOf(pkg.PACKAGE),
			"PERIOD":         ValueOf(pkg.PERIOD),
			"QUO":            ValueOf(pkg.QUO),
			"QUO_ASSIGN":     ValueOf(pkg.QUO_ASSIGN),
			"RANGE":          ValueOf(pkg.RANGE),
			"RBRACE":         ValueOf(pkg.RBRACE),
			"RBRACK":         ValueOf(pkg.RBRACK),
			"REM":            ValueOf(pkg.REM),
			"REM_ASSIGN":     ValueOf(pkg.REM_ASSIGN),
			"RETURN":         ValueOf(pkg.RETURN),
			"RPAREN":         ValueOf(pkg.RPAREN),
			"SELECT":         ValueOf(pkg.SELECT),
			"SEMICOLON":      ValueOf(pkg.SEMICOLON),
			"SHL":            ValueOf(pkg.SHL),
			"SHL_ASSIGN":     ValueOf(pkg.SHL_ASSIGN),
			"SHR":            ValueOf(pkg.SHR),
			"SHR_ASSIGN":     ValueOf(pkg.SHR_ASSIGN),
			"STRING":         ValueOf(pkg.STRING),
			"STRUCT":         ValueOf(pkg.STRUCT),
			"SUB":            ValueOf(pkg.SUB),
			"SUB_ASSIGN":     ValueOf(pkg.SUB_ASSIGN),
			"SWITCH":         ValueOf(pkg.SWITCH),
			"TYPE":           ValueOf(pkg.TYPE),
			"UnaryPrec":      ValueOf(pkg.UnaryPrec),
			"VAR":            ValueOf(pkg.VAR),
			"XOR":            ValueOf(pkg.XOR),
			"XOR_ASSIGN":     ValueOf(pkg.XOR_ASSIGN),
		}, map[string]Type{
			"File":     TypeOf((*pkg.File)(nil)).Elem(),
			"FileSet":  TypeOf((*pkg.FileSet)(nil)).Elem(),
			"Pos":      TypeOf((*pkg.Pos)(nil)).Elem(),
			"Position": TypeOf((*pkg.Position)(nil)).Elem(),
			"Token":    TypeOf((*pkg.Token)(nil)).Elem(),
		}
}

func init() {
	binds, types := Package_go_token()
	Binds["go/token"] = binds
	Types["go/token"] = types
}
