--- /usr/local/go/src/go/scanner/scanner.go	2017-02-16 19:27:47.000000000 +0000
+++ scanner.go	2017-04-02 13:54:30.000000000 +0000
@@ -16,6 +16,8 @@
 	"strconv"
 	"unicode"
 	"unicode/utf8"
+
+	mt "github.com/cosmos72/gomacro/token"
 )
 
 // An ErrorHandler may be provided to Scanner.Init. If a syntax error is
@@ -31,11 +33,12 @@
 //
 type Scanner struct {
 	// immutable state
-	file *token.File  // source file handle
-	dir  string       // directory portion of file.Name()
-	src  []byte       // source
-	err  ErrorHandler // error reporting; or nil
-	mode Mode         // scanning mode
+	file        *token.File  // source file handle
+	dir         string       // directory portion of file.Name()
+	src         []byte       // source
+	err         ErrorHandler // error reporting; or nil
+	mode        Mode         // scanning mode
+	specialChar rune         // prefix of interpreter quoting symbols ' ` , ,@
 
 	// scanning state
 	ch         rune // current character
@@ -110,7 +113,7 @@
 // Note that Init may call err if there is an error in the first character
 // of the file.
 //
-func (s *Scanner) Init(file *token.File, src []byte, err ErrorHandler, mode Mode) {
+func (s *Scanner) Init(file *token.File, src []byte, err ErrorHandler, mode Mode, specialChar rune) {
 	// Explicitly initialize all fields since a scanner may be reused.
 	if file.Size() != len(src) {
 		panic(fmt.Sprintf("file size (%d) does not match src len (%d)", file.Size(), len(src)))
@@ -120,6 +123,7 @@
 	s.src = src
 	s.err = err
 	s.mode = mode
+	s.specialChar = specialChar
 
 	s.ch = ' '
 	s.offset = 0
@@ -613,7 +617,7 @@
 		lit = s.scanIdentifier()
 		if len(lit) > 1 {
 			// keywords are longer than one letter - avoid lookup otherwise
-			tok = token.Lookup(lit)
+			tok = mt.Lookup(lit) // patch: support macro, quote and friends
 			switch tok {
 			case token.IDENT, token.BREAK, token.CONTINUE, token.FALLTHROUGH, token.RETURN:
 				insertSemi = true
@@ -699,8 +703,14 @@
 			}
 		case '*':
 			tok = s.switch2(token.MUL, token.MUL_ASSIGN)
-		case '/':
-			if s.ch == '/' || s.ch == '*' {
+		case '/', '#':
+			if ch == '/' && (s.ch == '/' || s.ch == '*') || ch == '#' && s.ch == '!' {
+				// accept both #! and // as line comments
+				// in this way, *.gomacro files can start with "#!/usr/bin/env gomacro"
+				// Unix-like systems will happily execute them directly
+				if s.ch == '!' {
+					s.ch = '/'
+				}
 				// comment
 				if s.insertSemi && s.findLineEnd() {
 					// reset position to the beginning of the comment
@@ -718,8 +728,13 @@
 				}
 				tok = token.COMMENT
 				lit = comment
-			} else {
+			} else if ch == '/' {
 				tok = s.switch2(token.QUO, token.QUO_ASSIGN)
+			} else {
+				s.error(s.file.Offset(pos), fmt.Sprintf("illegal character %#U", ch))
+				insertSemi = s.insertSemi // preserve insertSemi info
+				tok = token.ILLEGAL
+				lit = string(ch)
 			}
 		case '%':
 			tok = s.switch2(token.REM, token.REM_ASSIGN)
@@ -747,6 +762,37 @@
 			}
 		case '|':
 			tok = s.switch3(token.OR, token.OR_ASSIGN, '|', token.LOR)
+		case '@':
+			// patch: support macro, quote and friends
+			tok = mt.SPLICE
+		case s.specialChar:
+			// patch: support macro, quote and friends. s.specialChar is configurable, default is '~'
+			// quote           specialChar '
+			// quasiquote      specialChar `
+			// unquote         specialChar ,
+			// unquote_splice  specialChar ,@
+			switch s.ch {
+			case '\'':
+				s.next()
+				tok = mt.QUOTE
+			case '`':
+				s.next()
+				tok = mt.QUASIQUOTE
+			case ',':
+				s.next()
+				if s.ch == '@' {
+					s.next()
+					tok = mt.UNQUOTE_SPLICE
+				} else {
+					tok = mt.UNQUOTE
+				}
+			default:
+				tok = token.ILLEGAL
+			}
+			if tok != token.ILLEGAL {
+				break
+			}
+			fallthrough
 		default:
 			// next reports unexpected BOMs - don't repeat
 			if ch != bom {
