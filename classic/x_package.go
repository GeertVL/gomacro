// this file was generated by gomacro command: import "github.com/cosmos72/gomacro/classic"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package classic

import (
	r "reflect"

	. "github.com/cosmos72/gomacro/imports"
)

// reflection: allow interpreted code to import "github.com/cosmos72/gomacro/classic"
func init() {
	Packages["github.com/cosmos72/gomacro/classic"] = Package{
		Binds: map[string]r.Value{
			"New":                  r.ValueOf(New),
			"NewEnv":               r.ValueOf(NewEnv),
			"NewInterpreterCommon": r.ValueOf(NewThreadGlobals),
			"NilEnv":               r.ValueOf(&NilEnv).Elem(),
		},
		Types: map[string]r.Type{
			"Builtin":           r.TypeOf((*Constructor)(nil)).Elem(),
			"CallFrame":         r.TypeOf((*CallFrame)(nil)).Elem(),
			"CallStack":         r.TypeOf((*CallStack)(nil)).Elem(),
			"Cmd":               r.TypeOf((*Cmd)(nil)).Elem(),
			"Env":               r.TypeOf((*Env)(nil)).Elem(),
			"Error_builtin":     r.TypeOf((*Error_builtin)(nil)).Elem(),
			"Function":          r.TypeOf((*Function)(nil)).Elem(),
			"Inspector":         r.TypeOf((*Inspector)(nil)).Elem(),
			"Interface":         r.TypeOf((*Interface)(nil)).Elem(),
			"InterpreterCommon": r.TypeOf((*ThreadGlobals)(nil)).Elem(),
			"Macro":             r.TypeOf((*Macro)(nil)).Elem(),
			"Methods":           r.TypeOf((*Methods)(nil)).Elem(),
			"TypedValue":        r.TypeOf((*TypedValue)(nil)).Elem(),
		},
		Proxies: map[string]r.Type{}}
}
