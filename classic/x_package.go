// this file was generated by gomacro command: import _i "github.com/cosmos72/gomacro/classic"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package classic

import (
	r "reflect"

	"github.com/cosmos72/gomacro/imports"
)

// reflection: allow interpreted code to import "github.com/cosmos72/gomacro/classic"
func init() {
	imports.Packages["github.com/cosmos72/gomacro/classic"] = imports.Package{
		Binds: map[string]r.Value{
			"MultiThread":      r.ValueOf(MultiThread),
			"New":              r.ValueOf(New),
			"NewEnv":           r.ValueOf(NewEnv),
			"NewThreadGlobals": r.ValueOf(NewThreadGlobals),
			"NilEnv":           r.ValueOf(&NilEnv).Elem(),
		},
		Types: map[string]r.Type{
			"BindMap":       r.TypeOf((*BindMap)(nil)).Elem(),
			"CallFrame":     r.TypeOf((*CallFrame)(nil)).Elem(),
			"CallStack":     r.TypeOf((*CallStack)(nil)).Elem(),
			"Cmd":           r.TypeOf((*Cmd)(nil)).Elem(),
			"Constructor":   r.TypeOf((*Constructor)(nil)).Elem(),
			"Env":           r.TypeOf((*Env)(nil)).Elem(),
			"Error_builtin": r.TypeOf((*Error_builtin)(nil)).Elem(),
			"Function":      r.TypeOf((*Function)(nil)).Elem(),
			"Inspector":     r.TypeOf((*Inspector)(nil)).Elem(),
			"Interface":     r.TypeOf((*Interface)(nil)).Elem(),
			"Macro":         r.TypeOf((*Macro)(nil)).Elem(),
			"Methods":       r.TypeOf((*Methods)(nil)).Elem(),
			"ThreadGlobals": r.TypeOf((*ThreadGlobals)(nil)).Elem(),
			"TypeMap":       r.TypeOf((*TypeMap)(nil)).Elem(),
			"TypedValue":    r.TypeOf((*TypedValue)(nil)).Elem(),
		},
		Proxies: map[string]r.Type{}}
}
