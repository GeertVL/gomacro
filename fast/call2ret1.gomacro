/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * call_ret1.go
 *
 *  Created on Apr 15, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"github.com/cosmos72/gomacro/base"
	xt "github.com/cosmos72/gomacro/xtype"
)

:import (
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func convertret0(typ ast.Node) (ast.Node, ast.Node) {
	var t r.Type = EvalType(typ)
	var ret0 ast.Node = ~'{ret0} // set type ast.Node: classic interpreter is too clever and deduces *ast.Ident
	if t == nil {
		// keep the result wrapped in a reflect.Value
		typ = ~'{r.Value}
	} else {
		// unwrap the result
		tname := t.Name()
		// remove final digits from t.Name()
		// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
		for len(tname) != 0 {
			ch := tname[len(tname)-1]
			if ch < '0' || ch > '9' {
				break
			}
			tname = tname[0:len(tname)-1]
		}
		if tname == "uintptr" {
			tname = "uint" // use reflect.Value.Uint()
		}
		sel := ~"{~,ret0 . foo} // we modify it destructively
		sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

		switch t.Kind() {
		case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
			// result of reflect.Value.{tname} is already the correct type
			ret0 = ~"{~,sel ()}
		default:
			// convert int64, uint64... to the correct type
			ret0 = ~"{~,typ ( ~,sel () )}
		}
	}
	return typ, ret0
}

:macro mcall2ret1(arg0typ, arg1typ, rettyp ast.Node) ast.Node {
	if EvalType(rettyp) == nil {
		// keep the arguments and result wrapped in a reflect.Value
		return ~"{
			call = func(env *Env) r.Value {
				funv := exprfun(env)
				argv := []r.Value{
					argfuns[0](env),
					argfuns[1](env),
				}
				return funv.Call(argv)[0]
			}
		}
	}
	var ret0 ast.Node // unused
	rettyp, ret0 = convertret0(rettyp)

	if EvalType(arg0typ) == nil || EvalType(arg1typ) == nil {
		return ~"{
			call = func(env *Env) ~,rettyp {
				funv := exprfun(env)
				argv := []r.Value{
					argfuns[0](env),
					argfuns[1](env),
				}
				// Debugf("calling %v with args [%v]", r.TypeOf(funv), argv)
				ret0 := funv.Call(argv)[0]
				return ~,ret0
			}
		}
	}

	cachefun := ~"{
		if cachedfunv != funv {
			cachedfunv = funv
			cachedfun = funv.Interface().(func(~,arg0typ , ~,arg1typ) ~,rettyp)
		}
	}

	return ~"{
		arg0fun := args[0].WithFun().(func(env *Env) ~,arg0typ)
		arg1fun := args[1].WithFun().(func(env *Env) ~,arg1typ)
		if funsym != nil && funupn == maxdepth - 1 {
			var cachedfun func(~,arg0typ, ~,arg1typ) ~,rettyp
			call = func(env *Env) ~,rettyp {
				funv := env.ThreadGlobals.FileEnv.Binds[funindex]
				~,cachefun
				arg0 := arg0fun(env)
				arg1 := arg1fun(env)
				// Debugf("calling %v with args [%v %v]", r.TypeOf(fun), arg0, arg1)
				return cachedfun(arg0, arg1)
			}
		} else {
			call = func(env *Env) ~,rettyp {
				fun := exprfun(env).Interface().(func(~,arg0typ , ~,arg1typ) ~,rettyp)
				arg0 := arg0fun(env)
				arg1 := arg1fun(env)
				// Debugf("calling %v with args [%v %v]", r.TypeOf(fun), arg0, arg1)
				return fun(arg0, arg1)
			}
		}
	}
}

// not used, see comment below in mcallxy2ret1
:macro mcallx2ret1(arg1typ, rettyp ast.Node) ast.Node {
	return ~"{
		switch targ0 {
			case xt.TypeOfBool:      {mcall2ret1; bool;       ~,arg1typ; ~,rettyp}
			case xt.TypeOfInt:       {mcall2ret1; int;        ~,arg1typ; ~,rettyp}
			case xt.TypeOfInt8:      {mcall2ret1; int8;       ~,arg1typ; ~,rettyp}
			case xt.TypeOfInt16:     {mcall2ret1; int16;      ~,arg1typ; ~,rettyp}
			case xt.TypeOfInt32:     {mcall2ret1; int32;      ~,arg1typ; ~,rettyp}
			case xt.TypeOfInt64:     {mcall2ret1; int64;      ~,arg1typ; ~,rettyp}
			case xt.TypeOfUint:      {mcall2ret1; uint;       ~,arg1typ; ~,rettyp}
			case xt.TypeOfUint8:     {mcall2ret1; uint8;      ~,arg1typ; ~,rettyp}
			case xt.TypeOfUint16:    {mcall2ret1; uint16;     ~,arg1typ; ~,rettyp}
			case xt.TypeOfUint32:    {mcall2ret1; uint32;     ~,arg1typ; ~,rettyp}
			case xt.TypeOfUint64:    {mcall2ret1; uint64;     ~,arg1typ; ~,rettyp}
			case xt.TypeOfUintptr:   {mcall2ret1; uintptr;    ~,arg1typ; ~,rettyp}
			case xt.TypeOfFloat32:   {mcall2ret1; float32;    ~,arg1typ; ~,rettyp}
			case xt.TypeOfFloat64:   {mcall2ret1; float64;    ~,arg1typ; ~,rettyp}
			case xt.TypeOfComplex64: {mcall2ret1; complex64;  ~,arg1typ; ~,rettyp}
			case xt.TypeOfComplex128:{mcall2ret1; complex128; ~,arg1typ; ~,rettyp}
			case xt.TypeOfString:    {mcall2ret1; string;     ~,arg1typ; ~,rettyp}
			default:          {mcall2ret1; nil;        ~,arg1typ; ~,rettyp}
		}
	}
}

:macro mcallxy2ret1(rettyp ast.Node) ast.Node {
	// generating all combinations func(targ0,targ1) tret
	// produces a 6MB source file... definitely too much
	//
	// Only optimize func(targ0,targ0) tret
	// i.e. if the two args have the same type - still produces a 240kB source file
	return ~"{
		if targ0 == targ1 {
			switch targ0 {
				case xt.TypeOfBool:      {mcall2ret1; bool;       bool;       ~,rettyp}
				case xt.TypeOfInt:       {mcall2ret1; int;        int;        ~,rettyp}
				case xt.TypeOfInt8:      {mcall2ret1; int8;       int8;       ~,rettyp}
				case xt.TypeOfInt16:     {mcall2ret1; int16;      int16;      ~,rettyp}
				case xt.TypeOfInt32:     {mcall2ret1; int32;      int32;      ~,rettyp}
				case xt.TypeOfInt64:     {mcall2ret1; int64;      int64;      ~,rettyp}
				case xt.TypeOfUint:      {mcall2ret1; uint;       uint;       ~,rettyp}
				case xt.TypeOfUint8:     {mcall2ret1; uint8;      uint8;      ~,rettyp}
				case xt.TypeOfUint16:    {mcall2ret1; uint16;     uint16;     ~,rettyp}
				case xt.TypeOfUint32:    {mcall2ret1; uint32;     uint32;     ~,rettyp}
				case xt.TypeOfUint64:    {mcall2ret1; uint64;     uint64;     ~,rettyp}
				case xt.TypeOfUintptr:   {mcall2ret1; uintptr;    uintptr;    ~,rettyp}
				case xt.TypeOfFloat32:   {mcall2ret1; float32;    float32;    ~,rettyp}
				case xt.TypeOfFloat64:   {mcall2ret1; float64;    float64;    ~,rettyp}
				case xt.TypeOfComplex64: {mcall2ret1; complex64;  complex64;  ~,rettyp}
				case xt.TypeOfComplex128:{mcall2ret1; complex128; complex128; ~,rettyp}
				case xt.TypeOfString:    {mcall2ret1; string;     string;     ~,rettyp}
			}
		}
		if call == nil {
			{mcall2ret1; nil; nil; ~,rettyp}
		}
	}
}

func call2ret1(c *Call, maxdepth int) I {
	expr := c.Fun
	exprfun := expr.AsX1()
	funsym := expr.Sym
	funupn, funindex := -1, -1
	if funsym != nil {
		funupn = funsym.Upn
		funindex = funsym.Desc.Index()
		if funindex == NoIndex {
			base.Errorf("internal error: call2ret1() invoked for constant function %#v. use call_builtin() instead", expr)
		}
	}
	t := expr.Type
	targ0, targ1, tret := t.In(0), t.In(1), t.Out(0)
	args := c.Args
	argfunsX1 := c.MakeArgfunsX1()
	argfuns := [2]func(*Env) r.Value {
		argfunsX1[0],
		argfunsX1[1],
	}
	var cachedfunv r.Value
	var call I
	switch tret {
	case xt.TypeOfBool:      {mcallxy2ret1; bool}
	case xt.TypeOfInt:       {mcallxy2ret1; int}
	case xt.TypeOfInt8:      {mcallxy2ret1; int8}
	case xt.TypeOfInt16:     {mcallxy2ret1; int16}
	case xt.TypeOfInt32:     {mcallxy2ret1; int32}
	case xt.TypeOfInt64:     {mcallxy2ret1; int64}
	case xt.TypeOfUint:      {mcallxy2ret1; uint}
	case xt.TypeOfUint8:     {mcallxy2ret1; uint8}
	case xt.TypeOfUint16:    {mcallxy2ret1; uint16}
	case xt.TypeOfUint32:    {mcallxy2ret1; uint32}
	case xt.TypeOfUint64:    {mcallxy2ret1; uint64}
	case xt.TypeOfUintptr:   {mcallxy2ret1; uintptr}
	case xt.TypeOfFloat32:   {mcallxy2ret1; float32}
	case xt.TypeOfFloat64:   {mcallxy2ret1; float64}
	case xt.TypeOfComplex64: {mcallxy2ret1; complex64}
	case xt.TypeOfComplex128:{mcallxy2ret1; complex128}
	case xt.TypeOfString:    {mcallxy2ret1; string}
	default:                 {mcall2ret1;   nil; nil; nil} // cannot optimize more this one...
	}
	return call
}
