/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * func1ret0.go
 *
 *  Created on Apr 16, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"unsafe"

	. "github.com/cosmos72/gomacro/base"
)

:import (
	r "reflect"
	"go/ast"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

// convert a well-known reflect.Type into one of the constants TypeOf*
:func maketypeident(t r.Type) *ast.Ident {
	name := "TypeOf" + upcasefirstbyte(t.Name())
	return &ast.Ident{Name: name}
}

:func fsetarg(typ, tident, name, index ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	var bind ast.Node
	if t == nil {
		bind = ~"{
			place := r.New(~,tident).Elem()
			place.Set(r.ValueOf(~,name))
			env.Binds[~,index] = place
		}
	} else {
		typeident := maketypeident(t)
		switch t.Kind() {
			case r.Complex128:
				bind = ~"{
					place := r.New(~,typeident).Elem()
					place.SetComplex(~,name)
					env.Binds[~,index] = place
				}
			case r.String:
				bind = ~"{
					place := r.New(~,typeident).Elem()
					place.SetString(~,name)
					env.Binds[~,index] = place
				}
			case r.Uint64:
				bind = ~"{env.IntBinds[~,index] = ~,name}
			default:
				bind = ~"{*(*~,typ)(unsafe.Pointer(&env.IntBinds[~,index])) = ~,name}
		}
	}
	return bind
}

// fully optimized function declaration
:macro mfunc1ret0(arg0typ ast.Node) ast.Node {
	var t r.Type = EvalType(arg0typ)
	if t != nil {
		arg0bind := fsetarg(arg0typ, ~'targ0, ~'arg0, ~'param0index)
		return ~"{
			if funcbody == nil {
				return func(env *Env) r.Value {
					return r.ValueOf(func(~,arg0typ) {
					})
				}
			}
			return func(env *Env) r.Value {
				// function is closed over the env used to DECLARE it
				env.MarkUsedByClosure()
				return r.ValueOf(func(arg0 ~,arg0typ) {
					env := NewEnv4Func(env, nbinds, nintbinds)
					// copy arg0 into allocated binds
					~,arg0bind
					// execute the body
					funcbody(env)

					env.FreeEnv()
				})
			}
		}
	}
	// not a well-known type... use reflect.MakeFunc()
	return ~"{
		if funcbody == nil {
			return func(env *Env) r.Value {
				return r.MakeFunc(t, func([]r.Value) []r.Value {
					return ZeroValues
				})
			}
		} else {
			return func(env *Env) r.Value {
				// function is closed over the env used to DECLARE it
				env.MarkUsedByClosure()
				return r.MakeFunc(t, func(args []r.Value) []r.Value {
					env := NewEnv4Func(env, nbinds, nintbinds)

					// copy arg0 into allocated binds
					if param0index != NoIndex {
						place := r.New(targ0).Elem()
						if arg0 := args[0]; arg0 != Nil && arg0 != None {
							place.Set(arg0.Convert(targ0))
						}
						env.Binds[param0index] = place
					}
					// execute the body
					funcbody(env)

					return ZeroValues
				})
			}
		}
	}
}

func (c *Comp) func1ret0(t r.Type, m *funcMaker) func(*Env) r.Value {
	// do NOT keep a reference to funcMaker
	nbinds := m.nbinds
	nintbinds := m.nintbinds
	funcbody := m.funcbody
	param0index := m.parambinds[0].Desc.Index()

	targ0 := t.In(0)
	karg0 := targ0.Kind()
	switch karg0 {
	case r.Bool:      {mfunc1ret0; bool}
	case r.Int:       {mfunc1ret0; int}
	case r.Int8:      {mfunc1ret0; int8}
	case r.Int16:     {mfunc1ret0; int16}
	case r.Int32:     {mfunc1ret0; int32}
	case r.Int64:     {mfunc1ret0; int64}
	case r.Uint:      {mfunc1ret0; uint}
	case r.Uint8:     {mfunc1ret0; uint8}
	case r.Uint16:    {mfunc1ret0; uint16}
	case r.Uint32:    {mfunc1ret0; uint32}
	case r.Uint64:    {mfunc1ret0; uint64}
	case r.Uintptr:   {mfunc1ret0; uintptr}
	case r.Float32:   {mfunc1ret0; float32}
	case r.Float64:   {mfunc1ret0; float64}
	case r.Complex64: {mfunc1ret0; complex64}
	case r.Complex128:{mfunc1ret0; complex128}
	case r.String:    {mfunc1ret0; string}
	default:          {mfunc1ret0; nil}
	}
}
