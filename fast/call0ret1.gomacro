/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * call0ret1.go
 *
 *  Created on Apr 20, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	. "github.com/cosmos72/gomacro/base"
)

:import (
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func convertret0(typ ast.Node) (ast.Node, ast.Node) {
	var t r.Type = EvalType(typ)
	var ret0 ast.Node = ~'{ret0} // set type ast.Node: classic interpreter is too clever and deduces *ast.Ident
	if t == nil {
		// keep the result wrapped in a reflect.Value
		typ = ~'{r.Value}
	} else {
		// unwrap the result
		tname := t.Name()
		// remove final digits from t.Name()
		// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
		for len(tname) != 0 {
			ch := tname[len(tname)-1]
			if ch < '0' || ch > '9' {
				break
			}
			tname = tname[0:len(tname)-1]
		}
		if tname == "uintptr" {
			tname = "uint" // use reflect.Value.Uint()
		}
		sel := ~"{~,ret0 . foo} // we modify it destructively
		sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

		switch t.Kind() {
		case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
			// result of reflect.Value.{tname} is already the correct type
			ret0 = ~"{~,sel ()}
		default:
			// convert int64, uint64... to the correct type
			ret0 = ~"{~,typ ( ~,sel () )}
		}
	}
	return typ, ret0
}

:macro mcall0ret1(rettyp ast.Node) ast.Node {
	if EvalType(rettyp) == nil {
		// keep the result wrapped in a reflect.Value
		return ~"{
			call = func(env *Env) r.Value {
				funv := exprfun(env)
				return funv.Call(ZeroValues)[0]
			}
		}
	}

	var ret0 ast.Node // unused
	rettyp, ret0 = convertret0(rettyp)

	cachefun := ~"{
		if cachedfunv != funv {
			cachedfunv = funv
			cachedfun = funv.Interface().(func() ~,rettyp)
		}
	}

	return ~"{
		if funsym != nil {
			switch funupn {
			case maxdepth:
				var cachedfun func() ~,rettyp
				call = func(env *Env) ~,rettyp {
					funv := env.ThreadGlobals.TopEnv.Binds[funindex]
					~,cachefun
					// Debugf("calling %v with args []", r.TypeOf(cachedfun))
					return cachedfun()
				}
			case maxdepth - 1:
				var cachedfun func() ~,rettyp
				call = func(env *Env) ~,rettyp {
					funv := env.ThreadGlobals.FileEnv.Binds[funindex]
					~,cachefun
					// Debugf("calling %v with args []", r.TypeOf(cachedfun))
					return cachedfun()
				}
			case 0:
				call = func(env *Env) ~,rettyp {
					fun := env.Binds[funindex].Interface().(func() ~,rettyp)
					// Debugf("calling %v with args []", r.TypeOf(fun))
					return fun()
				}
			case 1:
				call = func(env *Env) ~,rettyp {
					fun := env.Outer.Binds[funindex].Interface().(func() ~,rettyp)
					// Debugf("calling %v with args []", r.TypeOf(fun))
					return fun()
				}
			case 2:
				call = func(env *Env) ~,rettyp {
					fun := env.Outer.Outer.Binds[funindex].Interface().(func() ~,rettyp)
					// Debugf("calling %v with args []", r.TypeOf(fun))
					return fun()
				}
			}
		}
		if call == nil {
			call = func(env *Env) ~,rettyp {
				fun := exprfun(env).Interface().(func() ~,rettyp)
				// Debugf("calling %v with args []", r.TypeOf(fun))
				return fun()
			}
		}
	}
}

func call0ret1(c *Call, maxdepth int) I {
	expr := c.Fun
	exprfun := expr.AsX1()
	funsym := c.Funsym
	funupn, funindex := -1, -1
	if funsym != nil {
		funupn = funsym.Upn
		funindex = funsym.Desc.Index()
	}
	kret := expr.Type.Out(0).Kind()
	var cachedfunv r.Value
	var call I
	switch kret {
	case r.Bool:      {mcall0ret1; bool}
	case r.Int:       {mcall0ret1; int}
	case r.Int8:      {mcall0ret1; int8}
	case r.Int16:     {mcall0ret1; int16}
	case r.Int32:     {mcall0ret1; int32}
	case r.Int64:     {mcall0ret1; int64}
	case r.Uint:      {mcall0ret1; uint}
	case r.Uint8:     {mcall0ret1; uint8}
	case r.Uint16:    {mcall0ret1; uint16}
	case r.Uint32:    {mcall0ret1; uint32}
	case r.Uint64:    {mcall0ret1; uint64}
	case r.Uintptr:   {mcall0ret1; uintptr}
	case r.Float32:   {mcall0ret1; float32}
	case r.Float64:   {mcall0ret1; float64}
	case r.Complex64: {mcall0ret1; complex64}
	case r.Complex128:{mcall0ret1; complex128}
	case r.String:    {mcall0ret1; string}
	default:          {mcall0ret1; nil}
	}
	return call
}
