/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * var_set.go
 *
 *  Created on Apr 09, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	"unsafe"

	. "github.com/cosmos72/gomacro/base"
)

:import (
	"go/ast"
	r "reflect"
)

:func fsetplace(depth, typ, expr, exprv ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var upn int = Eval(depth)
	var t r.Type = EvalType(typ)

	var loop, bind ast.Node

	if upn >= 0 {
		bind = ~'{env}
		for i := 0; i < upn; i++ {
			bind = ~"{~,bind . Outer}
		}
	} else if upn == -2 {
		bind = ~'{env.ThreadGlobals.FileEnv}
	} else if upn == -3 {
		bind = ~'{env.ThreadGlobals.TopEnv}
	} else {
		loop = ~'{
			o := env.Outer.Outer.Outer
			for i := 3; i < upn; i++ {
				o = o.Outer
			}
		}
		bind = ~'o
	}

	if t == nil {
		bind = ~"{~,bind . Binds[index] .Set(~,exprv)}
	} else {
		switch t.Kind() {
			case r.Complex128:
				bind = ~"{~,bind . Binds[index] .SetComplex(~,expr)}
			case r.String:
				bind = ~"{~,bind . Binds[index] .SetString(~,expr)}
			case r.Uint64:
				bind = ~"{~,bind . IntBinds[index] = ~,expr}
			default:
				typename := &ast.Ident{Name: t.Name()}
				bind = ~"{*(*~,typename)(unsafe.Pointer(& ~,bind .IntBinds[index])) = ~,expr}
		}
	}

	return ~"{
		ret = func(env *Env) (Stmt, *Env) {
			~,@loop
			~,bind
			env.IP++
			return env.Code[env.IP], env
		}
	}
}

:macro setplace_const(depth, typ ast.Node) ast.Node {
	ret := fsetplace(depth, typ, ~'val, ~'v)
	if EvalType(typ) == nil {
		return ret
	}
	return ~"{
		val := v.Interface().(~,typ)
		~,ret
	}
}

:macro setplace_expr(depth, typ ast.Node) ast.Node {
	ret := fsetplace(depth, typ, ~'{fun(env)}, ~'{fun(env).Convert(t)})
	if EvalType(typ) == nil {
		return ~"{
			fun := funAsX1(fun)
			~,ret
		}
	}
	return ~"{
		fun := fun.(func(*Env) ~,typ)
		~,ret
	}
}

:macro setplaces_const(depth ast.Node) ast.Node {
	return ~"{
		switch t {
		case TypeOfBool:       setplace_const; ~,depth; bool;
		case TypeOfInt:        setplace_const; ~,depth; int;
		case TypeOfInt8:       setplace_const; ~,depth; int8;
		case TypeOfInt16:      setplace_const; ~,depth; int16;
		case TypeOfInt32:      setplace_const; ~,depth; int32;
		case TypeOfInt64:      setplace_const; ~,depth; int64;
		case TypeOfUint:       setplace_const; ~,depth; uint;
		case TypeOfUint8:      setplace_const; ~,depth; uint8;
		case TypeOfUint16:     setplace_const; ~,depth; uint16;
		case TypeOfUint32:     setplace_const; ~,depth; uint32;
		case TypeOfUint64:     setplace_const; ~,depth; uint64;
		case TypeOfUintptr:    setplace_const; ~,depth; uintptr;
		case TypeOfFloat32:    setplace_const; ~,depth; float32;
		case TypeOfFloat64:    setplace_const; ~,depth; float64;
		case TypeOfComplex64:  setplace_const; ~,depth; complex64;
		case TypeOfComplex128: setplace_const; ~,depth; complex128;
		case TypeOfString:     setplace_const; ~,depth; string;
		default:               setplace_const; ~,depth; nil;
		}
	}
}

:macro setplaces_expr(depth ast.Node) ast.Node {
	return ~"{
		switch t {
		case TypeOfBool:       setplace_expr; ~,depth; bool;
		case TypeOfInt:        setplace_expr; ~,depth; int;
		case TypeOfInt8:       setplace_expr; ~,depth; int8;
		case TypeOfInt16:      setplace_expr; ~,depth; int16;
		case TypeOfInt32:      setplace_expr; ~,depth; int32;
		case TypeOfInt64:      setplace_expr; ~,depth; int64;
		case TypeOfUint:       setplace_expr; ~,depth; uint;
		case TypeOfUint8:      setplace_expr; ~,depth; uint8;
		case TypeOfUint16:     setplace_expr; ~,depth; uint16;
		case TypeOfUint32:     setplace_expr; ~,depth; uint32;
		case TypeOfUint64:     setplace_expr; ~,depth; uint64;
		case TypeOfUintptr:    setplace_expr; ~,depth; uintptr;
		case TypeOfFloat32:    setplace_expr; ~,depth; float32;
		case TypeOfFloat64:    setplace_expr; ~,depth; float64;
		case TypeOfComplex64:  setplace_expr; ~,depth; complex64;
		case TypeOfComplex128: setplace_expr; ~,depth; complex128;
		case TypeOfString:     setplace_expr; ~,depth; string;
		default:               setplace_expr; ~,depth; nil;
		}
	}
}

// varSetZero compiles 'variable = 0'
func (c *Comp) varSetZero(upn int, index int, t r.Type) {
	zero := r.Zero(t).Interface()
	c.varSetConst(upn, index, t, zero)
}

// varSetConst compiles 'name = constant'
func (c *Comp) varSetConst(upn int, index int, t r.Type, val I) {
	v := r.ValueOf(val)
	if ValueType(v) == nil {
		v = r.Zero(t)
	} else {
		v = v.Convert(t)
	}
	var ret func(env *Env) (Stmt, *Env)
	switch upn {
	case 0:         setplaces_const;  0
	case 1:         setplaces_const;  1
	case 2:         setplaces_const;  2
	default:        setplaces_const; -1
	case c.Depth-1: setplaces_const; -2
	}
	c.Code.Append(ret)
}

// varSetExpr compiles 'name = expression'
func (c *Comp) varSetExpr(upn int, index int, t r.Type, fun I) {
	var ret func(env *Env) (Stmt, *Env)
	switch upn {
	case 0:         setplaces_expr;  0
	case 1:         setplaces_expr;  1
	case 2:         setplaces_expr;  2
	default:        setplaces_expr; -1
	case c.Depth-1: setplaces_expr; -2
	}
	c.Code.Append(ret)
}
