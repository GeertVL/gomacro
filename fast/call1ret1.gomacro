/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * call1ret1.go
 *
 *  Created on Apr 15, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
	. "github.com/cosmos72/gomacro/base"
)

:import (
	"go/ast"
	"go/token"
	r "reflect"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

:macro mcall1ret1(argtyp, rettyp ast.Node) ast.Node {
	if EvalType(rettyp) == nil {
		// keep the arguments and result wrapped in a reflect.Value
		return ~"{
			call = func(env *Env) r.Value {
				funv := exprfun(env)
				argv := []r.Value{
					argfun(env),
				}
				return funv.Call(argv)[0]
			}
		}
	}
	if EvalType(argtyp) == nil {
		ret0 := convertvalue1(rettyp, ~'ret0)

		return ~"{
			call = func(env *Env) ~,rettyp {
				funv := exprfun(env)
				argv := []r.Value{
					argfun(env),
				}
				// Debugf("calling %v with args [%v]", r.TypeOf(funv), argv)
				ret0 := funv.Call(argv)[0]
				return ~,ret0
			}
		}
	}

	cachefun := ~"{
		if cachedfunv != funv {
			cachedfunv = funv
			cachedfun = funv.Interface().(func(~,argtyp) ~,rettyp)
		}
	}

	argconv := convertvalue1(argtyp, ~'{r.ValueOf(arg.Value)})

	return ~"{
		// base.Debugf("compiling call to %v, funsym=%p, funupn=%v, maxdepth=%v", r.TypeOf((func(~,argtyp) ~,rettyp)(nil)), funsym, funupn, maxdepth)
		if funsym != nil && funupn == maxdepth - 1 {
			var cachedfun func(~,argtyp) ~,rettyp
			if arg.Const() {
				argconst := ~,argconv
				call = func(env *Env) ~,rettyp {
					funv := env.ThreadGlobals.FileEnv.Binds[funindex]
					~,cachefun
					// Debugf("calling %v with args [%v]", r.TypeOf(cachedfun), argconst)
					return cachedfun(argconst)
				}
			} else {
				argfun := arg.Fun.(func(env *Env) ~,argtyp)
				call = func(env *Env) ~,rettyp {
					funv := env.ThreadGlobals.FileEnv.Binds[funindex]
					~,cachefun
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					return cachedfun(arg)
				}
			}
		} else {
			argfun := arg.WithFun().(func(env *Env) ~,argtyp)
			if funsym != nil && funupn == 0 {
				call = func(env *Env) ~,rettyp {
					fun := env.Binds[funindex].Interface().(func(~,argtyp) ~,rettyp)
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					return fun(arg)
				}
			} else if funsym != nil && funupn == 1 {
				call = func(env *Env) ~,rettyp {
					fun := env.Outer.Binds[funindex].Interface().(func(~,argtyp) ~,rettyp)
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					return fun(arg)
				}
			} else {
				call = func(env *Env) ~,rettyp {
					fun := exprfun(env).Interface().(func(~,argtyp) ~,rettyp)
					arg := argfun(env)
					// Debugf("calling %v with args [%v]", r.TypeOf(fun), arg)
					return fun(arg)
				}
			}
		}
	}
}

:macro mcall1ret1compact(argtyp, rettyp ast.Node) ast.Node {
	if EvalType(rettyp) == nil || EvalType(argtyp) == nil {
		// nothing to optimize...
		return ~"{mcall1ret1; ~,argtyp; ~,rettyp}
	}

	return ~"{
		argfun := arg.WithFun().(func(env *Env) ~,argtyp)
		call = func(env *Env) ~,rettyp {
			fun := exprfun(env).Interface().(func(~,argtyp) ~,rettyp)
			arg := argfun(env)
			// Debugf("calling %v with args [%v]", r.TypeOf(fun), argconst)
			return fun(arg)
		}
	}
}

:macro mcallx1ret1(rettyp ast.Node) ast.Node {
	return ~"{
		switch targ {
			case TypeOfBool:      {mcall1ret1; bool;       ~,rettyp}
			case TypeOfInt:       {mcall1ret1; int;        ~,rettyp}
			case TypeOfInt8:      {mcall1ret1; int8;       ~,rettyp}
			case TypeOfInt16:     {mcall1ret1; int16;      ~,rettyp}
			case TypeOfInt32:     {mcall1ret1; int32;      ~,rettyp}
			case TypeOfInt64:     {mcall1ret1; int64;      ~,rettyp}
			case TypeOfUint:      {mcall1ret1; uint;       ~,rettyp}
			case TypeOfUint8:     {mcall1ret1; uint8;      ~,rettyp}
			case TypeOfUint16:    {mcall1ret1; uint16;     ~,rettyp}
			case TypeOfUint32:    {mcall1ret1; uint32;     ~,rettyp}
			case TypeOfUint64:    {mcall1ret1; uint64;     ~,rettyp}
			case TypeOfUintptr:   {mcall1ret1; uintptr;    ~,rettyp}
			case TypeOfFloat32:   {mcall1ret1; float32;    ~,rettyp}
			case TypeOfFloat64:   {mcall1ret1; float64;    ~,rettyp}
			case TypeOfComplex64: {mcall1ret1; complex64;  ~,rettyp}
			case TypeOfComplex128:{mcall1ret1; complex128; ~,rettyp}
			case TypeOfString:    {mcall1ret1; string;     ~,rettyp}
			default:              {mcall1ret1; nil;        ~,rettyp}
		}
	}
}

:macro mcallx1ret1compact(rettyp ast.Node) ast.Node {
	return ~"{
		switch targ {
			case TypeOfBool:      {mcall1ret1compact; bool;       ~,rettyp}
			case TypeOfInt:       {mcall1ret1compact; int;        ~,rettyp}
			case TypeOfInt8:      {mcall1ret1compact; int8;       ~,rettyp}
			case TypeOfInt16:     {mcall1ret1compact; int16;      ~,rettyp}
			case TypeOfInt32:     {mcall1ret1compact; int32;      ~,rettyp}
			case TypeOfInt64:     {mcall1ret1compact; int64;      ~,rettyp}
			case TypeOfUint:      {mcall1ret1compact; uint;       ~,rettyp}
			case TypeOfUint8:     {mcall1ret1compact; uint8;      ~,rettyp}
			case TypeOfUint16:    {mcall1ret1compact; uint16;     ~,rettyp}
			case TypeOfUint32:    {mcall1ret1compact; uint32;     ~,rettyp}
			case TypeOfUint64:    {mcall1ret1compact; uint64;     ~,rettyp}
			case TypeOfUintptr:   {mcall1ret1compact; uintptr;    ~,rettyp}
			case TypeOfFloat32:   {mcall1ret1compact; float32;    ~,rettyp}
			case TypeOfFloat64:   {mcall1ret1compact; float64;    ~,rettyp}
			case TypeOfComplex64: {mcall1ret1compact; complex64;  ~,rettyp}
			case TypeOfComplex128:{mcall1ret1compact; complex128; ~,rettyp}
			case TypeOfString:    {mcall1ret1compact; string;     ~,rettyp}
			default:              {mcall1ret1compact; nil;        ~,rettyp}
		}
	}
}

func call1ret1(c *Call, maxdepth int) I {
	expr := c.Fun
	exprfun := expr.AsX1()
	funsym := expr.Sym
	funupn, funindex := -1, -1
	if funsym != nil {
		funupn = funsym.Upn
		funindex = funsym.Desc.Index()
		if funindex == NoIndex {
			Errorf("internal error: call1ret1() invoked for constant function %#v. use call_builtin() instead", expr)
		}
	}
	t := expr.Type
	targ := t.In(0)
	tret := t.Out(0)
	karg := targ.Kind()
	kret := tret.Kind()
	arg := c.Args[0]
	argfun := arg.AsX1()
	var cachedfunv r.Value
	var call I
	switch tret {
		// do NOT optimize all cases... too many combinations
		case TypeOfBool:      {mcallx1ret1; bool}
		case TypeOfInt:       {mcallx1ret1; int}
		case TypeOfInt8:      if karg == kret {mcall1ret1; int8; int8}       else {mcallx1ret1compact; int8}
		case TypeOfInt16:     if karg == kret {mcall1ret1; int16; int16}     else {mcallx1ret1compact; int16}
		case TypeOfInt32:     {mcallx1ret1; int32}
		case TypeOfInt64:     {mcallx1ret1; int64}
		case TypeOfUint:      {mcallx1ret1; uint}
		case TypeOfUint8:     if karg == kret {mcall1ret1; uint8; uint8}     else {mcallx1ret1compact; uint8}
		case TypeOfUint16:    if karg == kret {mcall1ret1; uint16; uint16}   else {mcallx1ret1compact; uint16}
		case TypeOfUint32:    if karg == kret {mcall1ret1; uint32; uint32}   else {mcallx1ret1compact; uint32}
		case TypeOfUint64:    {mcallx1ret1; uint64}
		case TypeOfUintptr:   if karg == kret {mcall1ret1; uintptr; uintptr} else {mcallx1ret1compact; uintptr}
		case TypeOfFloat32:   if karg == kret {mcall1ret1; float32; float32} else {mcallx1ret1compact; float32}
		case TypeOfFloat64:   if karg == kret {mcall1ret1; float64; float64} else {mcallx1ret1compact; float64}
		case TypeOfComplex64: if karg == kret {mcall1ret1; complex64; complex64}    else {mcallx1ret1compact; complex64}
		case TypeOfComplex128:if karg == kret {mcall1ret1; complex128; complex128}  else {mcallx1ret1compact; complex128}
		case TypeOfString:    {mcallx1ret1; string}
	}
	if call == nil {
		{mcall1ret1;  nil; nil} // cannot optimize more this one...
	}
	return call
}
