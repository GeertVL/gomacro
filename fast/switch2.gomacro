/*
 * gomacro - A Go intepreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * switch2.go
 *
 *  Created on May 06, 2017
 *      Author Massimiliano Ghilardi
 */

package fast

import (
	r "reflect"
)

:import (
	"go/ast"
	r "reflect"
)


:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func convertvalue1(typ, val ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	if t == nil {
		// keep the result wrapped in a reflect.Value
		return val
	}
	// unwrap the result
	tname := t.Name()
	// remove final digits from t.Name()
	// needed to convert Uint64 -> Uint etc. to calls reflect.Value.{tname}
	for len(tname) != 0 {
		ch := tname[len(tname)-1]
		if ch < '0' || ch > '9' {
			break
		}
		tname = tname[0:len(tname)-1]
	}
	if tname == "uintptr" {
		tname = "uint" // use reflect.Value.Uint()
	}
	sel := ~"{~,val . foo} // we modify it destructively
	sel.Sel = &ast.Ident{Name: upcasefirstbyte(tname)}

	switch t.Kind() {
	case r.Bool, r.Int64, r.Uint64, r.Float64, r.Complex128, r.String:
		// result of reflect.Value.{tname} is already the correct type
		val = ~"{~,sel ()}
	default:
		// convert int64, uint64... to the correct type
		val = ~"{~,typ ( ~,sel () )}
	}
	return val
}

:macro switchtag(typ ast.Node) ast.Node {
	return ~"{
		var val ~,typ
		cachefun = func(*Env) ~,typ {
			return val
		}
		efun := efun.(func(*Env) ~,typ)
		stmt = func(env *Env) (Stmt, *Env) {
			val = efun(env)
			env.IP++
			return env.Code[env.IP], env
		}
	}
}

// compile a statement that evaluates e.Fun() once,
// and return an expression that returns cached e.Fun() result
func (c *Comp) switchTag(e *Expr) *Expr {
	efun := e.Fun
	var cachefun I
	var stmt Stmt
	switch e.Type.Kind() {
	case r.Bool:		{switchtag; bool}
	case r.Int:			{switchtag; int}
	case r.Int8:		{switchtag; int8}
	case r.Int16:		{switchtag; int16}
	case r.Int32:		{switchtag; int32}
	case r.Int64:		{switchtag; int64}
	case r.Uint:		{switchtag; uint}
	case r.Uint8:		{switchtag; uint8}
	case r.Uint16:		{switchtag; uint16}
	case r.Uint32:		{switchtag; uint32}
	case r.Uint64:		{switchtag; uint64}
	case r.Uintptr:		{switchtag; uintptr}
	case r.Float32:		{switchtag; float32}
	case r.Float64:		{switchtag; float64}
	case r.Complex64:	{switchtag; complex64}
	case r.Complex128:	{switchtag; complex128}
	case r.String:		{switchtag; string}
	default:
		val := r.Zero(e.Type)
		cachefun = func(*Env) r.Value {
			return val
		}
		if efun, ok := efun.(func(*Env) (r.Value, []r.Value)); ok {
			stmt = func(env *Env) (Stmt, *Env) {
				val, _ = efun(env)
				env.IP++
				return env.Code[env.IP], env
			}
		} else {
			efun := e.AsX1()
			stmt = func(env *Env) (Stmt, *Env) {
				val = efun(env)
				env.IP++
				return env.Code[env.IP], env
			}
		}
	}
	c.Code.Append(stmt)
	return exprFun(e.Type, cachefun)
}

:macro switchgoto(typ ast.Node) ast.Node {
	conv := convertvalue1(typ, ~'{r.ValueOf(k)})
	return ~"{
		m := make(map[~,typ]int, len(seen.Map))
		for k, v := range seen.Map {
			m[~,conv] = v.IP
		}
		stmt = func(env *Env) (Stmt, *Env) {
			val := efun(env)
			if ip, ok := m[val]; ok {
				env.IP = ip
			} else {
				env.IP++
			}
			return env.Code[env.IP], env
		}
	}
}

// try to optimize switch using a computed goto
func (c *Comp) switchGoto(tag *Expr, seen *caseHelper, ip int) {
	if seen.SomeNonConst {
		return
	}
	var stmt Stmt
	switch efun := tag.Fun.(type) {
	case func(*Env) bool:
		m := [2]int{-1, -1}
		for k, v := range seen.Map {
			if r.ValueOf(k).Bool() {
				m[1] = v.IP
			} else {
				m[0] = v.IP
			}
		}
		stmt = func(env *Env) (Stmt, *Env) {
			val := efun(env)
			var ip int
			if val {
				ip = m[1]
			} else {
				ip = m[0]
			}
			if ip >= 0 {
				env.IP = ip
			} else {
				env.IP++
			}
			return env.Code[env.IP], env
		}
	case func(*Env) int:		{switchgoto; int}
	case func(*Env) int8:		{switchgoto; int8}
	case func(*Env) int16:		{switchgoto; int16}
	case func(*Env) int32:		{switchgoto; int32}
	case func(*Env) int64:		{switchgoto; int64}
	case func(*Env) uint:		{switchgoto; uint}
	case func(*Env) uint8:		{switchgoto; uint8}
	case func(*Env) uint16:		{switchgoto; uint16}
	case func(*Env) uint32:		{switchgoto; uint32}
	case func(*Env) uint64:		{switchgoto; uint64}
	case func(*Env) uintptr:	{switchgoto; uintptr}
	case func(*Env) float32:	{switchgoto; float32}
	case func(*Env) float64:	{switchgoto; float64}
	case func(*Env) complex64:	{switchgoto; complex64}
	case func(*Env) complex128:	{switchgoto; complex128}
	case func(*Env) string:		{switchgoto; string}
	case func(*Env) (r.Value, []r.Value):
		m := make(map[interface{}]int, len(seen.Map))
		for k, v := range seen.Map {
			m[k] = v.IP
		}
		stmt = func(env *Env) (Stmt, *Env) {
			v, _ := efun(env)
			if ip, ok := m[v.Interface()]; ok {
				env.IP = ip
			} else {
				env.IP++
			}
			return env.Code[env.IP], env
		}
	default:
		fun := tag.AsX1()
		m := make(map[interface{}]int, len(seen.Map))
		for k, v := range seen.Map {
			m[k] = v.IP
		}
		stmt = func(env *Env) (Stmt, *Env) {
			val := fun(env).Interface()
			if ip, ok := m[val]; ok {
				env.IP = ip
			} else {
				env.IP++
			}
			return env.Code[env.IP], env
		}
	}
	if stmt == nil {
		return
	}
	// replace the nop we reserved
	c.Code.List[ip] = stmt
}

