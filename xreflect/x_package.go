// this file was generated by gomacro command: import "github.com/cosmos72/gomacro/type2"
// DO NOT EDIT! Any change will be lost when the file is re-generated

package xtype

import (
	r "reflect"

	"github.com/cosmos72/gomacro/imports"
)

func init() {
	imports.Packages["github.com/cosmos72/gomacro/xtype"] = imports.Package{
		Binds: map[string]r.Value{
			"ArrayOf":            r.ValueOf(ArrayOf),
			"BasicTypes":         r.ValueOf(&BasicTypes).Elem(),
			"ChanOf":             r.ValueOf(ChanOf),
			"FromReflectType":    r.ValueOf(FromReflectType),
			"FuncOf":             r.ValueOf(FuncOf),
			"GensymEmbedded":     r.ValueOf(GensymEmbedded),
			"GensymPrivate":      r.ValueOf(GensymPrivate),
			"InterfaceOf":        r.ValueOf(InterfaceOf),
			"MapOf":              r.ValueOf(MapOf),
			"MaxDepth":           r.ValueOf(int64(MaxDepth)),
			"MaxInt":             r.ValueOf(int64(MaxInt)),
			"MaxUInt":            r.ValueOf(uint64(MaxUInt)),
			"MethodOf":           r.ValueOf(MethodOf),
			"NamedOf":            r.ValueOf(NamedOf),
			"NewPackage":         r.ValueOf(NewPackage),
			"PtrTo":              r.ValueOf(PtrTo),
			"SliceOf":            r.ValueOf(SliceOf),
			"StrGensymEmbedded":  r.ValueOf(StrGensymEmbedded),
			"StrGensymInterface": r.ValueOf(StrGensymInterface),
			"StrGensymPrivate":   r.ValueOf(StrGensymPrivate),
			"StructOf":           r.ValueOf(StructOf),
			"TypeOf":             r.ValueOf(TypeOf),
			"TypeOfBool":         r.ValueOf(&TypeOfBool).Elem(),
			"TypeOfComplex128":   r.ValueOf(&TypeOfComplex128).Elem(),
			"TypeOfComplex64":    r.ValueOf(&TypeOfComplex64).Elem(),
			"TypeOfError":        r.ValueOf(&TypeOfError).Elem(),
			"TypeOfFloat32":      r.ValueOf(&TypeOfFloat32).Elem(),
			"TypeOfFloat64":      r.ValueOf(&TypeOfFloat64).Elem(),
			"TypeOfInt":          r.ValueOf(&TypeOfInt).Elem(),
			"TypeOfInt16":        r.ValueOf(&TypeOfInt16).Elem(),
			"TypeOfInt32":        r.ValueOf(&TypeOfInt32).Elem(),
			"TypeOfInt64":        r.ValueOf(&TypeOfInt64).Elem(),
			"TypeOfInt8":         r.ValueOf(&TypeOfInt8).Elem(),
			"TypeOfInterface":    r.ValueOf(&TypeOfInterface).Elem(),
			"TypeOfString":       r.ValueOf(&TypeOfString).Elem(),
			"TypeOfUint":         r.ValueOf(&TypeOfUint).Elem(),
			"TypeOfUint16":       r.ValueOf(&TypeOfUint16).Elem(),
			"TypeOfUint32":       r.ValueOf(&TypeOfUint32).Elem(),
			"TypeOfUint64":       r.ValueOf(&TypeOfUint64).Elem(),
			"TypeOfUint8":        r.ValueOf(&TypeOfUint8).Elem(),
			"TypeOfUintptr":      r.ValueOf(&TypeOfUintptr).Elem(),
			"Zero":               r.ValueOf(Zero),
		},
		Types: map[string]r.Type{
			"InterfaceHeader": r.TypeOf((*InterfaceHeader)(nil)).Elem(),
			"Method":          r.TypeOf((*Method)(nil)).Elem(),
			"Package":         r.TypeOf((*Package)(nil)).Elem(),
			"ReflectConfig":   r.TypeOf((*ReflectConfig)(nil)).Elem(),
			"StructField":     r.TypeOf((*StructField)(nil)).Elem(),
			"Type":            r.TypeOf((*Type)(nil)).Elem(),
		},
		Proxies: map[string]r.Type{}}
}
