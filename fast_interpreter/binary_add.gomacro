/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * binary_add.go
 *
 *  Created on Apr 02, 2017
 *      Author Massimiliano Ghilardi
 */

package fast_interpreter

import (
	"go/ast"
	r "reflect"

	. "github.com/cosmos72/gomacro/base"
)

:import (
	"go/ast"
	r "reflect"
)


:macro binaryexpr(xconst, yconst, typ ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var xc, yc bool = Eval(xconst), Eval(yconst)

	if xc == yc {
		return ~"{
			x := x.(func(*Env) ~,typ)
			y := y.(func(*Env) ~,typ)
			fun = func(env *Env) ~,typ {
				return x(env) + y(env)
			}
		}
	} else if yc {
		return ~"{
			x := x.(func(*Env) ~,typ)
			y := y.(~,typ)
			fun = func(env *Env) ~,typ {
				return x(env) + y
			}
		}
	} else {
		return ~"{
			x := x.(~,typ)
			y := y.(func(*Env) ~,typ)
			fun = func(env *Env) ~,typ {
				return x + y(env)
			}
		}
	}
}

:macro binaryexprs(xconst, yconst ast.Node) ast.Node {

	return ~"{
		switch k {
		case r.Int:        {binaryexpr ; ~,xconst ; ~,yconst ; int}
		case r.Int8:       {binaryexpr ; ~,xconst ; ~,yconst ; int8}
		case r.Int16:      {binaryexpr ; ~,xconst ; ~,yconst ; int16}
		case r.Int32:      {binaryexpr ; ~,xconst ; ~,yconst ; int32}
		case r.Int64:      {binaryexpr ; ~,xconst ; ~,yconst ; int64}
		case r.Uint:       {binaryexpr ; ~,xconst ; ~,yconst ; uint}
		case r.Uint8:      {binaryexpr ; ~,xconst ; ~,yconst ; uint8}
		case r.Uint16:     {binaryexpr ; ~,xconst ; ~,yconst ; uint16}
		case r.Uint32:     {binaryexpr ; ~,xconst ; ~,yconst ; uint32}
		case r.Uint64:     {binaryexpr ; ~,xconst ; ~,yconst ; uint64}
		case r.Uintptr:    {binaryexpr ; ~,xconst ; ~,yconst ; uintptr}
		case r.Float32:    {binaryexpr ; ~,xconst ; ~,yconst ; float32}
		case r.Float64:    {binaryexpr ; ~,xconst ; ~,yconst ; float64}
		case r.Complex64:  {binaryexpr ; ~,xconst ; ~,yconst ; complex64}
		case r.Complex128: {binaryexpr ; ~,xconst ; ~,yconst ; complex128}
		case r.String:     {binaryexpr ; ~,xconst ; ~,yconst ; string}
		default:
			return c.invalidBinaryExpr(node, xe, ye)
		}
	}
}

func (c *Comp) Add(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()
	if !IsCategory(k, r.Int, r.Uint, r.Float64, r.Complex128, r.String) {
		return c.invalidBinaryExpr(node, xe, ye)
	}
	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun I
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryexprs ; false ; false}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		if isLiteralNumber(y, 0) {
			return xe
		}
		{binaryexprs ; false ; true}
	} else {
		x := xe.Value
		y := ye.Fun
		if isLiteralNumber(x, 0) {
			return ye
		}
		{binaryexprs ; true ; false}
	}
	return ExprFun(xe.Type, fun)
}
