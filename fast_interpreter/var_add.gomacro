/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * var_add.go
 *
 *  Created on Apr 09, 2017
 *      Author Massimiliano Ghilardi
 */

package fast_interpreter

import (
	r "reflect"
	"unsafe"

	"github.com/cosmos72/gomacro/base"
)

:import (
	"go/ast"
	r "reflect"
)

:func fsetplace(depth, typ, expr, exprv ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var upn int = Eval(depth)
	var t r.Type = EvalType(typ)
	var loop, bind ast.Node

	if upn >= 0 {
		bind = ~'{env}
		for i := 0; i < upn; i++ {
			bind = ~"{~,bind . Outer}
		}
	} else {
		loop = ~'{
			o := env.Outer.Outer.Outer
			for i := 3; i < upn; i++ {
				o = o.Outer
			}
		}
		bind = ~'o
	}

	if false && t == nil {
		bind = ~"{~,bind . Binds[index] .Set(~,exprv)}
	} else {
		switch t.Kind() {
			case r.Complex128:
				bind = ~"{lhs := ~,bind . Binds[index]; lhs.SetComplex(lhs.Complex() + ~,expr)}
			case r.String:
				bind = ~"{lhs := ~,bind . Binds[index]; lhs.SetString(lhs.String() + ~,expr)}
			case r.Uint64:
				bind = ~"{~,bind . IntBinds[index] += ~,expr}
			default:
				bind = ~"{*(*~,typ)(unsafe.Pointer(& ~,bind .IntBinds[index])) += ~,expr}
		}
	}

	return ~"{
		ret = func(env *Env) (Stmt, *Env) {
			~,@loop
			~,bind
			env.IP++
			return env.Code[env.IP], env
		}
	}
}

:macro setplace_const(depth ast.Node, typ ast.Node) ast.Node {
	return fsetplace(depth, typ, ~'val, ~'v)
}

:macro setplace_expr(depth ast.Node, typ ast.Node) ast.Node {
	return fsetplace(depth, typ, ~'{fun(env)}, ~'{fun(env).Convert(t)})
}


:macro setplaces_const(depth ast.Node) ast.Node {
	return ~"{
		switch val := val.(type) {
		case int:        setplace_const; ~,depth; int
		case int8:       setplace_const; ~,depth; int8
		case int16:      setplace_const; ~,depth; int16
		case int32:      setplace_const; ~,depth; int32
		case int64:      setplace_const; ~,depth; int64
		case uint:       setplace_const; ~,depth; uint
		case uint8:      setplace_const; ~,depth; uint8
		case uint16:     setplace_const; ~,depth; uint16
		case uint32:     setplace_const; ~,depth; uint32
		case uint64:     setplace_const; ~,depth; uint64
		case uintptr:    setplace_const; ~,depth; uintptr
		case float32:    setplace_const; ~,depth; float32
		case float64:    setplace_const; ~,depth; float64
		case complex64:  setplace_const; ~,depth; complex64
		case complex128: setplace_const; ~,depth; complex128
		case string:     setplace_const; ~,depth; string
		default:
			c.Errorf("invalid operator += on <%v>", t)
		}
	}
}

:macro setplaces_expr(depth ast.Node) ast.Node {
	return ~"{
		switch fun := fun.(type) {
		case func(*Env) int:        setplace_expr; ~,depth; int
		case func(*Env) int8:       setplace_expr; ~,depth; int8
		case func(*Env) int16:      setplace_expr; ~,depth; int16
		case func(*Env) int32:      setplace_expr; ~,depth; int32
		case func(*Env) int64:      setplace_expr; ~,depth; int64
		case func(*Env) uint:       setplace_expr; ~,depth; uint
		case func(*Env) uint8:      setplace_expr; ~,depth; uint8
		case func(*Env) uint16:     setplace_expr; ~,depth; uint16
		case func(*Env) uint32:     setplace_expr; ~,depth; uint32
		case func(*Env) uint64:     setplace_expr; ~,depth; uint64
		case func(*Env) uintptr:    setplace_expr; ~,depth; uintptr
		case func(*Env) float32:    setplace_expr; ~,depth; float32
		case func(*Env) float64:    setplace_expr; ~,depth; float64
		case func(*Env) complex64:  setplace_expr; ~,depth; complex64
		case func(*Env) complex128: setplace_expr; ~,depth; complex128
		case func(*Env) string:     setplace_expr; ~,depth; string
		default:
			c.Errorf("invalid operator += between <%v> and <%v>", t, funTypeOuts(fun))
		}
	}
}

// varAddConst compiles 'name += constant'
func (c *Comp) varAddConst(upn int, index int, t r.Type, val I) {
	var ret func(env *Env) (Stmt, *Env)
	v := r.ValueOf(val)
	if base.ValueType(v) != t {
		v = v.Convert(t)
	}
	switch upn {
	case 0:  setplaces_const; 0
	case 1:  setplaces_const; 1
	case 2:  setplaces_const; 2
	default: setplaces_const; -1
	}
	c.Code.Append(ret)
}

// varAddExpr compiles 'name += expression'
func (c *Comp) varAddExpr(upn int, index int, t r.Type, fun I) {
	var ret func(env *Env) (Stmt, *Env)
	switch upn {
	case 0:  setplaces_expr; 0
	case 1:  setplaces_expr; 1
	case 2:  setplaces_expr; 2
	default: setplaces_expr; -1
	}
	c.Code.Append(ret)
}

// varAdd compiles both 'name += constant' and 'name += expression'
func (c *Comp) varAdd(va *Var, init *Expr) {
	t := va.Type
	if init.Const() {
		init.ConstTo(t)
	} else if init.Type != t {
		if t.Kind() != init.Type.Kind() || !init.Type.AssignableTo(t) {
			c.Errorf("incompatible types in assignment: <%v> += <%v>", t, init.Type)
			return
		}
	}
	class := va.Desc.Class()
	if class != VarBind && class != IntBind {
		c.Errorf("invalid operator += on %v", class)
		return
	}
	upn := va.Upn
	index := va.Desc.Index()
	if index == NoIndex {
		c.Errorf("invalid operator += on _")
		return
	}
	if init.Const() {
		c.varAddConst(upn, index, t, init.Value)
	} else {
		c.varAddExpr(upn, index, t, init.Fun)
	}
}

