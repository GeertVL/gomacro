/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * func_ret0.go
 *
 *  Created on Apr 16, 2017
 *      Author Massimiliano Ghilardi
 */

package fast_interpreter

import (
	r "reflect"
	"unsafe"

	. "github.com/cosmos72/gomacro/base"
)

:import (
	r "reflect"
	"go/ast"
)

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

// convert a well-known reflect.Type into one of the constants TypeOf*
:func maketypeident(t r.Type) *ast.Ident {
	name := "TypeOf" + upcasefirstbyte(t.Name())
	return &ast.Ident{Name: name}
}

:func fsetarg(typ, tident, name, index ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	var bind ast.Node
	if t == nil {
		bind = ~"{
			place := r.New(~,tident).Elem()
			place.Set(r.ValueOf(~,name))
			env.Binds[~,index] = place
		}
	} else {
		typeident := maketypeident(t)
		switch t.Kind() {
			case r.Complex128:
				bind = ~"{
					place := r.New(~,typeident).Elem()
					place.SetComplex(~,name)
					env.Binds[~,index] = place
				}
			case r.String:
				bind = ~"{
					place := r.New(~,typeident).Elem()
					place.SetString(~,name)
					env.Binds[~,index] = place
				}
			case r.Uint64:
				bind = ~"{env.IntBinds[~,index] = ~,name}
			default:
				bind = ~"{*(*~,typ)(unsafe.Pointer(&env.IntBinds[~,index])) = ~,name}
		}
	}
	return bind
}
	
:macro func0ret0() ast.Node {
	return ~"{
		if funcbody == nil {
			return func(env *Env) r.Value {
				return r.ValueOf(INone)
			}
		} else {
			return func(env *Env) r.Value {
				// function is closed over the env used to DECLARE it
				env.MarkUsedByClosure()
				return r.ValueOf(func() {
					env := NewEnv4Func(env, nbinds, nintbinds)
					// execute the body
					funcbody(env)

					env.FreeEnv()
				})
			}
		}
	}
}

// fully optimized function declaration
:macro func1ret0(arg0typ ast.Node) ast.Node {
	var t r.Type = EvalType(arg0typ)
	if t != nil {
		arg0bind := fsetarg(arg0typ, ~'targ0, ~'arg0, ~'param0index)
		return ~"{
			if funcbody == nil {
				return func(env *Env) r.Value {
					return r.ValueOf(func(~,arg0typ) {
					})
				}
			}
			param0index := parambinds[0].Desc.Index()
			if param0index == NoIndex {
				return func(env *Env) r.Value {
					// function is closed over the env used to DECLARE it
					env.MarkUsedByClosure()
					return r.ValueOf(func(~,arg0typ) {
						env := NewEnv4Func(env, nbinds, nintbinds)
						// arg0 is ignored
						
						// execute the body
						funcbody(env)
	
						env.FreeEnv()
					})
				}
			} else {
				return func(env *Env) r.Value {
					// function is closed over the env used to DECLARE it
					env.MarkUsedByClosure()
					return r.ValueOf(func(arg0 ~,arg0typ) {
						env := NewEnv4Func(env, nbinds, nintbinds)
						// copy arg0 into allocated binds
						~,arg0bind
						// execute the body
						funcbody(env)
	
						env.FreeEnv()
					})
				}
			}
		}
	}
	// not a well-known type... use reflect.MakeFunc()
	return ~"{
		if funcbody == nil {
			return func(env *Env) r.Value {
				return r.MakeFunc(t, func([]r.Value) []r.Value {
					return ZeroValues
				})
			}
		} else {
			param0index := parambinds[0].Desc.Index()
			return func(env *Env) r.Value {
				// function is closed over the env used to DECLARE it
				env.MarkUsedByClosure()
				return r.MakeFunc(t, func(args []r.Value) []r.Value {
					env := NewEnv4Func(env, nbinds, nintbinds)
					
					// copy arg0 into allocated binds
					if param0index != NoIndex {
						place := r.New(targ0).Elem()
						if arg0 := args[0]; arg0 != Nil && arg0 != None {
							place.Set(arg0.Convert(targ0))
						}
						env.Binds[param0index] = place
					}
					// execute the body
					funcbody(env)

					return ZeroValues
				})
			}
		}
	}
}

// fully optimized function implementation
:macro func2ret0(arg0typ, arg1typ ast.Node) ast.Node {
	var t0 r.Type = EvalType(arg0typ)
	var t1 r.Type = EvalType(arg1typ)

	if t0 != nil && t1 != nil {
		arg0bind := fsetarg(arg0typ, ~'targ0, ~'arg0, ~'{paramindexes[0]})
		arg1bind := fsetarg(arg0typ, ~'targ0, ~'arg0, ~'{paramindexes[1]})
		return ~"{
			if funcbody == nil {
				return func(env *Env) r.Value {
					return r.ValueOf(func(~,arg0typ, ~,arg1typ) {
					})
				}
			}
			if paramindexes[0] == NoIndex && paramindexes[1] == NoIndex {
				return func(env *Env) r.Value {
					// function is closed over the env used to DECLARE it
					env.MarkUsedByClosure()
					return r.ValueOf(func(arg0 ~,arg0typ, arg1 ~,arg1typ) {
						env := NewEnv4Func(env, nbinds, nintbinds)
						// arg0 and arg1 are ignored
						
						// execute the body
						funcbody(env)
	
						env.FreeEnv()
					})
				}
			} else if paramindexes[0] != NoIndex && paramindexes[1] == NoIndex {
				return func(env *Env) r.Value {
					// function is closed over the env used to DECLARE it
					env.MarkUsedByClosure()
					return r.ValueOf(func(arg0 ~,arg0typ, arg1 ~,arg1typ) {
						env := NewEnv4Func(env, nbinds, nintbinds)
						// copy arg0 into allocated binds
						~,arg0bind
						// execute the body
						funcbody(env)
	
						env.FreeEnv()
					})
				}
			} else if paramindexes[0] == NoIndex && paramindexes[1] != NoIndex {
				return func(env *Env) r.Value {
					// function is closed over the env used to DECLARE it
					env.MarkUsedByClosure()
					return r.ValueOf(func(arg0 ~,arg0typ, arg1 ~,arg1typ) {
						env := NewEnv4Func(env, nbinds, nintbinds)
						// copy arg1 into allocated binds
						~,arg1bind
						// execute the body
						funcbody(env)
	
						env.FreeEnv()
					})
				}
			} else {
				return func(env *Env) r.Value {
					// function is closed over the env used to DECLARE it
					env.MarkUsedByClosure()
					return r.ValueOf(func(arg0 ~,arg0typ, arg1 ~,arg1typ) {
						env := NewEnv4Func(env, nbinds, nintbinds)
						// copy arg0, arg1 into allocated binds
						~,arg0bind
						~,arg1bind
						// execute the body
						funcbody(env)
	
						env.FreeEnv()
					})
				}
			}
		}
	}
	// not well-known types... use reflect.MakeFunc()
	return ~"{
		if funcbody == nil {
			return func(env *Env) r.Value {
				return r.MakeFunc(t, func([]r.Value) []r.Value {
					return ZeroValues
				})
			}
		} else {
			return func(env *Env) r.Value {
				// function is closed over the env used to DECLARE it
				env.MarkUsedByClosure()
				return r.MakeFunc(t, func(args []r.Value) []r.Value {
					env := NewEnv4Func(env, nbinds, nintbinds)
					
					// copy args into allocated binds
					for i := range targs {
						if idx := paramindexes[i]; idx != NoIndex {
							place := r.New(targs[i]).Elem()
							if arg := args[i]; arg != Nil && arg != None {
								place.Set(arg.Convert(targs[i]))
							}
							env.Binds[idx] = place
						}
					}
					// execute the body
					funcbody(env)

					return ZeroValues
				})
			}
		}
	}
}

// if arg0typ != arg1typ use Comp.DeclBindRuntimeValue() to limit source code size,
// while still providing reasonably optimized function implementation.
// if arg0typ == arg1typ, provide fully optimized function implementation
:macro funcopt2ret0(arg0typ, arg1typ ast.Node) ast.Node {
	var t0 r.Type = EvalType(arg0typ)
	var t1 r.Type = EvalType(arg1typ)
	if t0 == t1 {
		return ~"{func2ret0; ~,arg0typ; ~,arg1typ}
	}
	
	return ~"{
		if funcbody == nil {
			return func(env *Env) r.Value {
				return r.ValueOf(func(~,arg0typ, ~,arg1typ) {
				})
			}
		}
		return func(env *Env) r.Value {
			// function is closed over the env used to DECLARE it
			if paramindexes[0] != NoIndex || paramindexes[1] != NoIndex {
				env.MarkUsedByClosure()
			}
			return r.ValueOf(func(arg0 ~,arg0typ, arg1 ~,arg1typ) {
				env := NewEnv4Func(env, nbinds, nintbinds)

				// copy args into allocated binds
				argdecls[0](env, r.ValueOf(arg0))
				argdecls[1](env, r.ValueOf(arg1))
				
				// execute the body
				funcbody(env)

				env.FreeEnv()
			})
		}
	}
}

:macro funcopty2ret0(arg0typ ast.Node) ast.Node {
	return ~"{
		switch karg0 {
		case r.Bool:      {funcopt2ret0; ~,arg0typ; bool}
		case r.Int:       {funcopt2ret0; ~,arg0typ; int}
		case r.Int8:      {funcopt2ret0; ~,arg0typ; int8}
		case r.Int16:     {funcopt2ret0; ~,arg0typ; int16}
		case r.Int32:     {funcopt2ret0; ~,arg0typ; int32}
		case r.Int64:     {funcopt2ret0; ~,arg0typ; int64}
		case r.Uint:      {funcopt2ret0; ~,arg0typ; uint}
		case r.Uint8:     {funcopt2ret0; ~,arg0typ; uint8}
		case r.Uint16:    {funcopt2ret0; ~,arg0typ; uint16}
		case r.Uint32:    {funcopt2ret0; ~,arg0typ; uint32}
		case r.Uint64:    {funcopt2ret0; ~,arg0typ; uint64}
		case r.Uintptr:   {funcopt2ret0; ~,arg0typ; uintptr}
		case r.Float32:   {funcopt2ret0; ~,arg0typ; float32}
		case r.Float64:   {funcopt2ret0; ~,arg0typ; float64}
		case r.Complex64: {funcopt2ret0; ~,arg0typ; complex64}
		case r.Complex128:{funcopt2ret0; ~,arg0typ; complex128}
		case r.String:    {funcopt2ret0; ~,arg0typ; string}
		}
	}
}

:macro funcoptxy2ret0(dummy ast.Node) ast.Node {
	return ~"{
		argdecls := [2]func(*Env, r.Value){
			c.DeclBindRuntimeValue(m.paramnames[0], parambinds[0]),
			c.DeclBindRuntimeValue(m.paramnames[1], parambinds[1]),
		}
		switch karg0 {
		case r.Bool:      {funcopty2ret0; bool}
		case r.Int:       {funcopty2ret0; int}
		case r.Int8:      {funcopty2ret0; int8}
		case r.Int16:     {funcopty2ret0; int16}
		case r.Int32:     {funcopty2ret0; int32}
		case r.Int64:     {funcopty2ret0; int64}
		case r.Uint:      {funcopty2ret0; uint}
		case r.Uint8:     {funcopty2ret0; uint8}
		case r.Uint16:    {funcopty2ret0; uint16}
		case r.Uint32:    {funcopty2ret0; uint32}
		case r.Uint64:    {funcopty2ret0; uint64}
		case r.Uintptr:   {funcopty2ret0; uintptr}
		case r.Float32:   {funcopty2ret0; float32}
		case r.Float64:   {funcopty2ret0; float64}
		case r.Complex64: {funcopty2ret0; complex64}
		case r.Complex128:{funcopty2ret0; complex128}
		case r.String:    {funcopty2ret0; string}
		}
	}
}	


func (c *Comp) func_ret0(t r.Type, m *funcMaker) func(*Env) r.Value {
	// do NOT keep a reference to funcMaker
	nbinds := m.nbinds
	nintbinds := m.nintbinds
	parambinds := m.parambinds
	funcbody := m.funcbody

	switch t.NumIn() {
	case 0:
		{func0ret0}
	case 1:
		targ0 := t.In(0)
		karg0 := targ0.Kind()
		switch karg0 {
		case r.Bool:      {func1ret0; bool}
		case r.Int:       {func1ret0; int}
		case r.Int8:      {func1ret0; int8}
		case r.Int16:     {func1ret0; int16}
		case r.Int32:     {func1ret0; int32}
		case r.Int64:     {func1ret0; int64}
		case r.Uint:      {func1ret0; uint}
		case r.Uint8:     {func1ret0; uint8}
		case r.Uint16:    {func1ret0; uint16}
		case r.Uint32:    {func1ret0; uint32}
		case r.Uint64:    {func1ret0; uint64}
		case r.Uintptr:   {func1ret0; uintptr}
		case r.Float32:   {func1ret0; float32}
		case r.Float64:   {func1ret0; float64}
		case r.Complex64: {func1ret0; complex64}
		case r.Complex128:{func1ret0; complex128}
		case r.String:    {func1ret0; string}
		default:          {func1ret0; nil}
		}
	case 2:
		targ0 := t.In(0)
		targ1 := t.In(1)
		karg0 := targ0.Kind()
		karg1 := targ1.Kind()

		targs := [2]r.Type{targ0, targ1}
		paramindexes := [2]int{
			parambinds[0].Desc.Index(), 
			parambinds[1].Desc.Index(),
		}
		
		if IsOptimizedKind(karg0) && IsOptimizedKind(karg1) {
			{funcoptxy2ret0; nil}
		}
		{func2ret0; nil; nil}
	}
	return c.funcGeneric(t, m)
}

