/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * assign_add_const.go
 *
 *  Created on Apr 09, 2017
 *      Author Massimiliano Ghilardi
 */

package fast_interpreter

import (
	r "reflect"
	"unsafe"

	"github.com/cosmos72/gomacro/base"
)

:import (
	"go/ast"
	r "reflect"
)

:func fsetplace(upn int, t r.Type) ast.Node {
	var loop, bind ast.Node

	if upn >= 0 {
		bind = ~'{env}
		for i := 0; i < upn; i++ {
			bind = ~"{~,bind . Outer}
		}
	} else {
		loop = ~'{
			o := env.Outer.Outer.Outer
			for i := 3; i < upn; i++ {
				o = o.Outer
			}
		}
		bind = ~'o
	}

	if t == nil {
		bind = ~"{~,bind . Binds[index] .Set(v)}
	} else {
		switch t.Kind() {
			case r.Complex128:
				bind = ~"{place := ~,bind . Binds[index]; place.SetComplex(place.Complex() - val)}
			case r.Uint64:
				bind = ~"{~,bind . IntBinds[index] -= val}
			default:
				typename := &ast.Ident{Name: t.Name()}
				bind = ~"{*(*~,typename)(unsafe.Pointer(& ~,bind .IntBinds[index])) -= val}
		}
	}

	return ~"{
		ret = func(env *Env) (Stmt, *Env) {
			~,@loop
			~,bind
			env.IP++
			return env.Code[env.IP], env
		}
	}
}

:macro setplace(depth ast.Node, typ ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var upn int = Eval(depth)
	var t r.Type = EvalType(typ)

	return fsetplace(upn, t)
}

:macro setplaces(depth ast.Node) ast.Node {
	return ~"{
		switch val := val.(type) {
		case int:        {setplace ; ~,depth ; int}
		case int8:       {setplace ; ~,depth ; int8}
		case int16:      {setplace ; ~,depth ; int16}
		case int32:      {setplace ; ~,depth ; int32}
		case int64:      {setplace ; ~,depth ; int64}
		case uint:       {setplace ; ~,depth ; uint}
		case uint8:      {setplace ; ~,depth ; uint8}
		case uint16:     {setplace ; ~,depth ; uint16}
		case uint32:     {setplace ; ~,depth ; uint32}
		case uint64:     {setplace ; ~,depth ; uint64}
		case uintptr:    {setplace ; ~,depth ; uintptr}
		case float32:    {setplace ; ~,depth ; float32}
		case float64:    {setplace ; ~,depth ; float64}
		case complex64:  {setplace ; ~,depth ; complex64}
		case complex128: {setplace ; ~,depth ; complex128}
		default:
			c.Errorf("invalid operator -= on <%v>", t)
		}
	}
}

// placeAddConst compiles 'place -= constant'
func (c *Comp) placeSubConst(place *Place, init *Expr) {
	if place.Fun != nil {
		c.Errorf("unimplemented operator -= on place (only -= on variables is currently implemented)")
	}
	t := place.Type
	if t == nil {
		c.Errorf("invalid operator -= on <%v>", t)
	}
	init.ConstTo(t)

	upn := place.Upn
	desc := place.Desc
	var ret func(env *Env) (Stmt, *Env)

	switch desc.Class() {
	default:
		c.Errorf("invalid operator += on %v", desc.Class())
		return
	case VarBind, IntBind:
		index := desc.Index()
		if index == NoIndex {
			c.Errorf("invalid operator += on _")
			return
		}
		val := init.Value
		v := r.ValueOf(val)
		if base.ValueType(v) != t {
			v = v.Convert(t)
		}
		switch upn {
		case 0:  {setplaces ; 0}
		case 1:  {setplaces ; 1}
		case 2:  {setplaces ; 2}
		default: {setplaces ; -1}
		}
	}
	c.Code.Append(ret)
}
