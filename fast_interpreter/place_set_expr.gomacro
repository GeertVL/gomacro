/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * assign_set_expr.go
 *
 *  Created on Apr 09, 2017
 *      Author Massimiliano Ghilardi
 */

package fast_interpreter

import (
	r "reflect"
	"unsafe"
)

:import (
	"go/ast"
	r "reflect"
)

:func fsetexpr(upn int, t r.Type) ast.Node {
	var loop, bind ast.Node

	if upn >= 0 {
		bind = ~'{env}
		for i := 0; i < upn; i++ {
			bind = ~"{~,bind . Outer}
		}
	} else {
		loop = ~'{
			o := env.Outer.Outer.Outer
			for i := 3; i < upn; i++ {
				o = o.Outer
			}
		}
		bind = ~'o
	}

	if t == nil {
		bind = ~"{~,bind . Binds[index] .Set(fun(env).Convert(t))}
	} else {
		switch t.Kind() {
			case r.Complex128:
				bind = ~"{~,bind . Binds[index] .SetComplex(fun(env))}
			case r.String:
				bind = ~"{~,bind . Binds[index] .SetString(fun(env))}
			case r.Uint64:
				bind = ~"{~,bind . IntBinds[index] = fun(env)}
			default:
				typename := &ast.Ident{Name: t.Name()}
				bind = ~"{*(*~,typename)(unsafe.Pointer(& ~,bind .IntBinds[index])) = fun(env)}
		}
	}

	return ~"{
		ret = func(env *Env) (Stmt, *Env) {
			~,@loop
			~,bind
			env.IP++
			return env.Code[env.IP], env
		}
	}
}

:macro setexpr(depth ast.Node, typ ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var upn int = Eval(depth)
	var t r.Type = EvalType(typ)

	return fsetexpr(upn, t)
}

:macro setexprs(depth ast.Node) ast.Node {
	return ~"{
		switch fun := init.Fun.(type) {
		case func(env *Env) bool:       {setexpr ; ~,depth ; bool}
		case func(env *Env) int:        {setexpr ; ~,depth ; int}
		case func(env *Env) int8:       {setexpr ; ~,depth ; int8}
		case func(env *Env) int16:      {setexpr ; ~,depth ; int16}
		case func(env *Env) int32:      {setexpr ; ~,depth ; int32}
		case func(env *Env) int64:      {setexpr ; ~,depth ; int64}
		case func(env *Env) uint:       {setexpr ; ~,depth ; uint}
		case func(env *Env) uint8:      {setexpr ; ~,depth ; uint8}
		case func(env *Env) uint16:     {setexpr ; ~,depth ; uint16}
		case func(env *Env) uint32:     {setexpr ; ~,depth ; uint32}
		case func(env *Env) uint64:     {setexpr ; ~,depth ; uint64}
		case func(env *Env) uintptr:    {setexpr ; ~,depth ; uintptr}
		case func(env *Env) float32:    {setexpr ; ~,depth ; float32}
		case func(env *Env) float64:    {setexpr ; ~,depth ; float64}
		case func(env *Env) complex64:  {setexpr ; ~,depth ; complex64}
		case func(env *Env) complex128: {setexpr ; ~,depth ; complex128}
		case func(env *Env) string:     {setexpr ; ~,depth ; string}
		case func(env *Env) r.Value:    {setexpr ; ~,depth ; nil}
		default:
			c.Errorf("unsupported expression type, cannot compile assignment: %v <%v> returns %v",
				fun, r.TypeOf(fun), init.Outs())
			return
		}
	}
}

// placeSetExpr compiles 'place = expression'
func (c *Comp) placeSetExpr(place *Place, init *Expr) {
	if place.Fun != nil {
		c.Errorf("unimplemented assignment to place (only assignment to variables is currently implemented)")
	}
	t := place.Type
	if t == nil {
		c.Errorf("invalid assignment: place has type <%v>", t)
	}
	if init.Const() {
		c.Errorf("internal error: placeSetExpr() invoked with constant expression. must call placeSetConst()")
	} else if init.Type != t {
		if t.Kind() != init.Type.Kind() || !init.Type.AssignableTo(t) {
			c.Errorf("cannot assign <%v> to <%v>", init.Type, t)
			return
		}
	}
	upn := place.Upn
	desc := place.Desc
	var ret func(env *Env) (Stmt, *Env)

	switch desc.Class() {
	default:
		c.Errorf("cannot assign to %v", desc.Class())
		return
	case VarBind, IntBind:
		index := desc.Index()
		if index == NoIndex {
			// assigning an expression to _
			// only keep the expression side effects
			c.Code.Append(init.AsStmt())
			return
		}
		switch upn {
		case 0:  {setexprs ; 0}
		case 1:  {setexprs ; 1}
		case 2:  {setexprs ; 2}
		default: {setexprs ; -1}
		}
	}
	c.Code.Append(ret)
}
