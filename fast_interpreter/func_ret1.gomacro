/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * func_ret1.go
 *
 *  Created on Apr 16, 2017
 *      Author Massimiliano Ghilardi
 */

package fast_interpreter

import (
	r "reflect"
	"unsafe"

	. "github.com/cosmos72/gomacro/base"
)

:import (
	r "reflect"
	"go/ast"
)


:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

// convert a well-known reflect.Type into one of the constants TypeOf*
:func maketypeident(t r.Type) *ast.Ident {
	name := "TypeOf" + upcasefirstbyte(t.Name())
	return &ast.Ident{Name: name}
}

:func fsetarg(typ, name, index ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	var bind ast.Node
	typeident := maketypeident(t)
	switch t.Kind() {
		case r.Complex128:
			bind = ~"{
				place := r.New(~,typeident).Elem()
				place.SetComplex(~,name)
				env.Binds[~,index] = place
			}
		case r.String:
			bind = ~"{
				place := r.New(~,typeident).Elem()
				place.SetString(~,name)
				env.Binds[~,index] = place
			}
		case r.Uint64:
			bind = ~"{env.IntBinds[~,index] = ~,name}
		default:
			bind = ~"{*(*~,typ)(unsafe.Pointer(&env.IntBinds[~,index])) = ~,name}
	}
	return bind
}

:func fgetresult(typ, index ast.Node) ast.Node {
	var t r.Type = EvalType(typ)
	var bind ast.Node
	if t == nil {
		bind = ~"{env.Binds[~,index]}
	} else {
		typeident := maketypeident(t)
		switch t.Kind() {
			case r.Complex128:
				bind = ~"{env.Binds[~,index].Complex()}
			case r.String:
				bind = ~"{env.Binds[~,index].String()}
			case r.Uint64:
				bind = ~"{env.IntBinds[~,index]}
			default:
				bind = ~"{*(*~,typ)(unsafe.Pointer(&env.IntBinds[~,index]))}
		}
	}
	return bind
}

// ----------------- func() t0 ---------------------

:macro macro0ret1(ret0typ ast.Node) ast.Node {
	if EvalType(ret0typ) == nil {
		// not a well-known type
		return ~"{
			return c.funcGeneric(t, m)
		}
	}
	return ~"{
		if funcbody == nil {
			return func(env *Env) r.Value {
				return r.ValueOf(func() (ret0 ~,ret0typ) {
					return
				})
			}
		}
		resultfun := m.resultfuns[0].(func (*Env) ~,ret0typ)
		return func(env *Env) r.Value {
			// function is closed over the env used to DECLARE it
			env.MarkUsedByClosure()
			return r.ValueOf(func() (ret0 ~,ret0typ) {
				env := NewEnv4Func(env, nbinds, nintbinds)

				// execute the body
				funcbody(env)

				// extract result
				ret0 = resultfun(env)
				env.FreeEnv()
				return
			})
		}
	}
}

func (c *Comp) func0retx1(t r.Type, m *funcMaker) func(*Env) r.Value {
	// do NOT keep a reference to funcMaker
	nbinds := m.nbinds
	nintbinds := m.nintbinds
	funcbody := m.funcbody

	tret0 := t.Out(0)
	kret0 := tret0.Kind()
	switch kret0 {
	case r.Bool:      {macro0ret1; bool}
	case r.Int:       {macro0ret1; int}
	case r.Int8:      {macro0ret1; int8}
	case r.Int16:     {macro0ret1; int16}
	case r.Int32:     {macro0ret1; int32}
	case r.Int64:     {macro0ret1; int64}
	case r.Uint:      {macro0ret1; uint}
	case r.Uint8:     {macro0ret1; uint8}
	case r.Uint16:    {macro0ret1; uint16}
	case r.Uint32:    {macro0ret1; uint32}
	case r.Uint64:    {macro0ret1; uint64}
	case r.Uintptr:   {macro0ret1; uintptr}
	case r.Float32:   {macro0ret1; float32}
	case r.Float64:   {macro0ret1; float64}
	case r.Complex64: {macro0ret1; complex64}
	case r.Complex128:{macro0ret1; complex128}
	case r.String:    {macro0ret1; string}
	default:          {macro0ret1; nil}
	}
}

// ----------------- func(t0) t1 ---------------------

// generate fully optimized function implementation for func(arg0typ) ret0typ
:macro funcopt1ret1(arg0typ, ret0typ ast.Node) ast.Node {
	arg0bind := fsetarg(arg0typ, ~'arg0, ~'{indexes[0]})
	ret0bind := fgetresult(ret0typ, ~'{indexes[1]})
	return ~"{
		if funcbody == nil {
			return func(env *Env) r.Value {
				return r.ValueOf(func(~,arg0typ) (ret0 ~,ret0typ) {
					return
				})
			}
		}

		return func(env *Env) r.Value {
			// function is closed over the env used to DECLARE it
			env.MarkUsedByClosure()
			return r.ValueOf(func(arg0 ~,arg0typ) (ret0 ~,ret0typ) {
				env := NewEnv4Func(env, nbinds, nintbinds)

				// copy arg into allocated binds
				~,arg0bind

				// execute the body
				funcbody(env)

				// extract result
				ret0 = ~,ret0bind
				env.FreeEnv()
				return
			})
		}
	}
}

:macro funcopt1retx1(arg0typ ast.Node) ast.Node {
	return ~"{
		switch kret0 {
		case r.Bool:      {funcopt1ret1; ~,arg0typ; bool}
		case r.Int:       {funcopt1ret1; ~,arg0typ; int}
		case r.Int8:      {funcopt1ret1; ~,arg0typ; int8}
		case r.Int16:     {funcopt1ret1; ~,arg0typ; int16}
		case r.Int32:     {funcopt1ret1; ~,arg0typ; int32}
		case r.Int64:     {funcopt1ret1; ~,arg0typ; int64}
		case r.Uint:      {funcopt1ret1; ~,arg0typ; uint}
		case r.Uint8:     {funcopt1ret1; ~,arg0typ; uint8}
		case r.Uint16:    {funcopt1ret1; ~,arg0typ; uint16}
		case r.Uint32:    {funcopt1ret1; ~,arg0typ; uint32}
		case r.Uint64:    {funcopt1ret1; ~,arg0typ; uint64}
		case r.Uintptr:   {funcopt1ret1; ~,arg0typ; uintptr}
		case r.Float32:   {funcopt1ret1; ~,arg0typ; float32}
		case r.Float64:   {funcopt1ret1; ~,arg0typ; float64}
		case r.Complex64: {funcopt1ret1; ~,arg0typ; complex64}
		case r.Complex128:{funcopt1ret1; ~,arg0typ; complex128}
		case r.String:    {funcopt1ret1; ~,arg0typ; string}
		}
	}
}

:macro funcoptx1retx1(dummy ast.Node) ast.Node {
	return ~"{
		switch karg0 {
		case r.Bool:      {funcopt1retx1; bool}
		case r.Int:       {funcopt1retx1; int}
		case r.Int8:      {funcopt1retx1; int8}
		case r.Int16:     {funcopt1retx1; int16}
		case r.Int32:     {funcopt1retx1; int32}
		case r.Int64:     {funcopt1retx1; int64}
		case r.Uint:      {funcopt1retx1; uint}
		case r.Uint8:     {funcopt1retx1; uint8}
		case r.Uint16:    {funcopt1retx1; uint16}
		case r.Uint32:    {funcopt1retx1; uint32}
		case r.Uint64:    {funcopt1retx1; uint64}
		case r.Uintptr:   {funcopt1retx1; uintptr}
		case r.Float32:   {funcopt1retx1; float32}
		case r.Float64:   {funcopt1retx1; float64}
		case r.Complex64: {funcopt1retx1; complex64}
		case r.Complex128:{funcopt1retx1; complex128}
		case r.String:    {funcopt1retx1; string}
		}
	}
}

func (c *Comp) funcx1rety1(t r.Type, m *funcMaker) func(*Env) r.Value {
	// do NOT keep a reference to funcMaker
	nbinds := m.nbinds
	nintbinds := m.nintbinds
	funcbody := m.funcbody

	karg0 := t.In(0).Kind()
	kret0 := t.Out(0).Kind()

	indexes := [2]int{
		m.parambinds[0].Desc.Index(),
		m.resultbinds[0].Desc.Index(),
	}

	// if IsOptimizedKind(karg0) && IsOptimizedKind(kret0)
		{funcoptx1retx1; nil}

	return c.funcGeneric(t, m)
}



func (c *Comp) func_ret1(t r.Type, m *funcMaker) func(*Env) r.Value {
	switch t.NumIn() {
	case 0:
		return c.func0retx1(t, m)
	case 1:
		return c.funcx1rety1(t, m)
	default:
		return c.funcGeneric(t, m)
	}
}

