/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * address.go
 *
 *  Created on Apr 05, 2017
 *      Author Massimiliano Ghilardi
 */

package fast_interpreter

import (
	r "reflect"
	"unsafe"
)

:import (
	"go/ast"
	r "reflect"
)


:func faddress(upn int, typ ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var t r.Type = EvalType(typ)
	var loop, bind, rettype ast.Node

	if upn >= 0 {
		bind = ~'{env}
		for i := 0; i < upn; i++ {
			bind = ~"{~,bind . Outer}
		}
	} else {
		loop = ~'{
			o := env.Outer.Outer.Outer
			for i := 3; i < upn; i++ {
				o = o.Outer
			}
		}
		bind = ~'o
	}

	if t == nil {
		bind = ~"{~,bind . Binds[index] .Addr()}
		rettype = ~'{r.Value}
	} else {
		rettype = ~"{* ~,typ}
		switch t.Kind() {
			case r.Uint64:
				bind = ~"{& ~,bind . IntBinds[index]}
			default:
				bind = ~"{(*~,typ)(unsafe.Pointer(& ~,bind .IntBinds[index]))}
		}
	}

	return ~"{
		ret = func(env *Env) (~,rettype) {
			~,@loop
			return ~,bind
		}
	}
}

:macro address(depth ast.Node, typ ast.Node) ast.Node {
	// the return type of Eval() and EvalType() varies. better check early.
	var upn int = Eval(depth)

	return faddress(upn, typ)
}

:macro addresses(depth ast.Node) ast.Node {
	return ~"{
		switch k {
		case r.Bool:       {address ; ~,depth ; bool}
		case r.Int:        {address ; ~,depth ; int}
		case r.Int8:       {address ; ~,depth ; int8}
		case r.Int16:      {address ; ~,depth ; int16}
		case r.Int32:      {address ; ~,depth ; int32}
		case r.Int64:      {address ; ~,depth ; int64}
		case r.Uint:       {address ; ~,depth ; uint}
		case r.Uint8:      {address ; ~,depth ; uint8}
		case r.Uint16:     {address ; ~,depth ; uint16}
		case r.Uint32:     {address ; ~,depth ; uint32}
		case r.Uint64:     {address ; ~,depth ; uint64}
		case r.Uintptr:    {address ; ~,depth ; uintptr}
		case r.Float32:    {address ; ~,depth ; float32}
		case r.Float64:    {address ; ~,depth ; float64}
		case r.Complex64:  {address ; ~,depth ; complex64}
		default:           {address ; ~,depth ; nil}
		}
	}
}


// IdentAddress compiles the expression "&name" where name is a variable
func (c *Comp) IdentAddress(name string) *Expr {
	upn, bind := c.Resolve(name)
	switch bind.Desc.Class() {
	default:
		c.Errorf("cannot take the address of %v", name)
		return nil
	case VarBind, IntBind:
		k := bind.Type.Kind()
		index := bind.Desc.Index()
		var ret I
		switch upn {
		case 0:  {addresses ; 0}
		case 1:  {addresses ; 1}
		case 2:  {addresses ; 2}
		default: {addresses ; -1}
		}
		return &Expr{Lit: Lit{Type: r.PtrTo(bind.Type)}, Fun: ret}
	}
}
