/*
 * gomacro - A Go interpreter with Lisp-like macros
 *
 * Copyright (C) 2017 Massimiliano Ghilardi
 *
 *     This program is free software you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http//www.gnu.org/licenses/>.
 *
 * binary_relops.go
 *
 *  Created on Apr 12, 2017
 *      Author Massimiliano Ghilardi
 */

package fast_interpreter

import (
	"go/ast"
	r "reflect"

	// . "github.com/cosmos72/gomacro/base"
)

:import (
	"fmt"
	"go/ast"
	"go/token"
	r "reflect"
)


:macro binaryop(opnode, xconst, yconst, typ ast.Node) ast.Node {

	// the return type of Eval() and EvalType() varies. better check early.
	var xc, yc bool = Eval(xconst), Eval(yconst)
	var optoken token.Token = Eval(opnode)

	if xc == yc {
		var expr *ast.BinaryExpr = ~"{x(env) && y(env)} // quasiquote, we modify it destructively
		expr.Op = optoken

		return ~"{
			x := x.(func(*Env) ~,typ)
			y := y.(func(*Env) ~,typ)
			fun = func(env *Env) bool {
				return ~,expr
			}
		}
	} else if yc {
		var expr *ast.BinaryExpr = ~"{x(env) && y} // quasiquote, we modify it destructively
		expr.Op = optoken

		return ~"{
			x := x.(func(*Env) ~,typ)
			y := y.(~,typ)
			fun = func(env *Env) bool {
				return ~,expr
			}
		}
	} else {
		var expr *ast.BinaryExpr = ~"{x && y(env)} // quasiquote, we modify it destructively
		expr.Op = optoken

		return ~"{
			x := x.(~,typ)
			y := y.(func(*Env) ~,typ)
			fun = func(env *Env) bool {
				return ~,expr
			}
		}
	}
}

:func upcasefirstbyte(str string) string {
	if len(str) > 0 && str[0] >= 'a' && str[0] <= 'z' {
		bytes := []byte(str)
		bytes[0] -= 'a' - 'A'
		return string(bytes)
	}
	return str
}

:func makekind(typ ast.Node) ast.Node {
	t := EvalType(typ)

	// go/ast.SelectorExpr requires the foo in r.foo to be an *ast.Ident, cannot unquote there
	kind := ~"{r . foo}
	kind.Sel = &ast.Ident{Name: upcasefirstbyte(t.Name())}
	return kind
}

:macro binaryops(opnode, xconst, yconst, types ast.Node) ast.Node {
	typelist := types.(*ast.BlockStmt).List
	caselist := make([]ast.Stmt, 0, len(typelist))
	foundnil := false
	for _, typ := range typelist {
		t := EvalType(typ)
		if t == nil {
			caselist = append(caselist, ~"{default: binaryop ; ~,opnode ; ~,xconst ; ~,yconst ; ~,typ})
			foundnil = true

		} else if t.Kind() == r.Int {
			// shortcut for all int* types
			for _, typ := range []ast.Expr{~'int, ~'int8, ~'int16, ~'int32, ~'int64} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: binaryop ; ~,opnode ; ~,xconst ; ~,yconst ; ~,typ})
			}
		} else if t.Kind() == r.Uint {
			// shortcut for all uint* types
			for _, typ := range []ast.Expr{~'uint, ~'uint8, ~'uint16, ~'uint32, ~'uint64, ~'uintptr} {
				kind := makekind(typ)
				caselist = append(caselist, ~"{case ~,kind: binaryop ; ~,opnode ; ~,xconst ; ~,yconst ; ~,typ})
			}
		} else {
			kind := makekind(typ)
			caselist = append(caselist, ~"{case ~,kind: binaryop ; ~,opnode ; ~,xconst ; ~,yconst ; ~,typ})
		}
	}

	if !foundnil {
		caselist = append(caselist, ~'{default: return c.invalidBinaryExpr(node, xe, ye)})
	}
	ret := ~"{ switch k { } } // modified parser does not yet support unquoting inside switch body
	ret.Body = ~"{ ~,@caselist }
	return ret
}

func (c *Comp) Lss(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun func (*Env) bool
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops ; token.LSS ; false ; false; { int; uint; float32; float64; string }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		{binaryops ; token.LSS ; false ; true; { int; uint; float32; float64; string }}
	} else {
		x := xe.Value
		y := ye.Fun
		{binaryops ; token.LSS ; true ; false; { int; uint; float32; float64; string }}
	}
	return ExprBool(fun)
}

func (c *Comp) Gtr(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun func (*Env) bool
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops ; token.GTR ; false ; false; { int; uint; float32; float64; string }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		{binaryops ; token.GTR ; false ; true; { int; uint; float32; float64; string }}
	} else {
		x := xe.Value
		y := ye.Fun
		{binaryops ; token.GTR ; true ; false; { int; uint; float32; float64; string }}
	}
	return ExprBool(fun)
}

func (c *Comp) Leq(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun func (*Env) bool
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops ; token.LEQ ; false ; false; { int; uint; float32; float64; string }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		{binaryops ; token.LEQ ; false ; true; { int; uint; float32; float64; string }}
	} else {
		x := xe.Value
		y := ye.Fun
		{binaryops ; token.LEQ ; true ; false; { int; uint; float32; float64; string }}
	}
	return ExprBool(fun)
}

func (c *Comp) Geq(node *ast.BinaryExpr, xe *Expr, ye *Expr) *Expr {
	xc, yc := xe.Const(), ye.Const()
	c.toSameFuncType(node, xe, ye)
	k := xe.Type.Kind()

	// if both x and y are constants, BinaryExpr will invoke EvalConst()
	// on our return value. no need to optimize that.
	var fun func (*Env) bool
	if xc == yc {
		x, y := xe.Fun, ye.Fun
		{binaryops ; token.GEQ ; false ; false; { int; uint; float32; float64; string }}
	} else if yc {
		x := xe.Fun
		y := ye.Value
		{binaryops ; token.GEQ ; false ; true; { int; uint; float32; float64; string }}
	} else {
		x := xe.Value
		y := ye.Fun
		{binaryops ; token.GEQ ; true ; false; { int; uint; float32; float64; string }}
	}
	return ExprBool(fun)
}
